/*
Copyright (C) 2018-2022 Geoffrey Daniels. https://gpdaniels.com/

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License only.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#pragma once
#ifndef GTL_VISION_CONSENSUS_EVALUATE_INLIER_SUPPORT_HPP
#define GTL_VISION_CONSENSUS_EVALUATE_INLIER_SUPPORT_HPP

// Summary: Implementation of a model evaulator that counts the number of inliers under a threshold. [wip]

#include <vision/consensus/evaluator>

namespace {
    using size_t = decltype(sizeof(1));
}

namespace gtl {
    class inlier_support final
        : public evaluator {
    private:
        const float thresdhold;

    public:
        inlier_support(const float residual_thresdhold)
            : thresdhold(residual_thresdhold) {
        }

    public:
        virtual float evaluate(
            const float* const __restrict residuals,
            const size_t residuals_size,
            size_t* const __restrict inliers,
            size_t& inliers_size
        ) override final {
            inliers_size = 0;
            for (size_t i = 0; i < residuals_size; ++i) {
                if (residuals[i] < this->thresdhold) {
                    inliers[inliers_size++] = i;
                }
            }
            return static_cast<float>(residuals_size - inliers_size);
        }
    };
}

#endif // GTL_VISION_CONSENSUS_EVALUATE_INLIER_SUPPORT_HPP
