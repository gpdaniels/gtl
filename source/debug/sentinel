/*
Copyright (C) 2018-2024 Geoffrey Daniels. https://gpdaniels.com/

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License only.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#pragma once
#ifndef GTL_DEBUG_SENTINEL_HPP
#define GTL_DEBUG_SENTINEL_HPP

// Summary: A simple class to help detect stack overflows. [wip]

#ifndef NDEBUG
#   if defined(_MSC_VER)
#       define __builtin_trap() __debugbreak()
#   endif
/// @brief A simple assert macro to break the program if the sentinel is misused.
#   define GTL_SENTINEL_ASSERT(ASSERTION, MESSAGE) static_cast<void>((ASSERTION) || (__builtin_trap(), 0))
#else
/// @brief At release time the assert macro is implemented as a nop.
#   define GTL_SENTINEL_ASSERT(ASSERTION, MESSAGE) static_cast<void>(0)
#endif

namespace gtl {
    /// @brief  The sentinel class validates a buffer upon destruction.
    template <int size = 16 * 1024, unsigned char data = 0xDD>
    class sentinel final {
    private:
        static_assert(size > 0, "The buffer size must be greater than zero.");

    private:
        unsigned char buffer[size];

    public:
        /// @brief  ...
        ~sentinel() {
            #ifndef NDEBUG
                for (int i = 0; i < size; ++i) {
                    GTL_SENTINEL_ASSERT(this->buffer[i] == data, "The stack has been corrupted.");
                }
            #endif
        }

        /// @brief  ...
        sentinel() {
            #ifndef NDEBUG
                for (int i = 0; i < size; ++i) {
                    this->buffer[i] = data;
                }
            #endif
        }
    };
}

#undef GTL_SENTINEL_ASSERT

#endif // GTL_DEBUG_SENTINEL_HPP
