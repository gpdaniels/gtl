/*
The MIT License
Copyright (c) 2018 Geoffrey Daniels. http://gpdaniels.com/
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE
*/

#pragma once
#ifndef GTL_TYPE_ID_HPP
#define GTL_TYPE_ID_HPP

namespace gtl {
    /// @brief  The type_id class creates and holds a unique identifier for a type.
    class type_id final {
    private:
        /// @brief  To generate the unique types an lambda function is created in a template struct, when the struct is used the template parameter makes the address of the lambda unique.
        template <typename type>
        struct identifier_generator {
            /// @brief  The actual bit of unique type information.
            constexpr static const auto identifier = [](){};
        };

    public:
        /// @brief  Once generated the type_id class holds the unique identifier as an integer.
        const unsigned long long int identifier;

    public:
        /// @brief  Constructor, using the provided type argument the constructor sets the internal ID value using the identifier_generator.
        /// @param  - The unnamed argument allows the constructor template argument to be deduced from the provided argument.  For construcors template parameters have to be automatically deduced.
        template<typename type>
        constexpr type_id(type)
            : identifier(reinterpret_cast<const unsigned long long int>(&identifier_generator<type>::identifier)) {
        }

    public:
        /// @brief  Get the value of the identifier.
        constexpr unsigned long long int id() const {
            return this->identifier;
        }

        /// @brief  Return the value of the identifier when the class is cast to an unsigned long long int.
        constexpr operator unsigned long long int() const {
            return this->identifier;
        }

    public:
        /// @brief  The less than operator is the only one defined using the identifier value, all other operators are defined using this one.
        /// @param  rhs - The right hand side of the comparison.
        constexpr bool operator < (const type_id& rhs) const {
            return (this->identifier < rhs.identifier);
        }

        /// @brief  The greater than operator defined using the less than operator with the sides of the comparison reversed.
        /// @param  rhs - The right hand side of the comparison.
        constexpr bool operator > (const type_id& rhs) const {
            return rhs < *this;
        }

        /// @brief  The less than or equal to operator defined using the greater than operator and inverted.
        /// @param  rhs - The right hand side of the comparison.
        constexpr bool operator <=(const type_id& rhs) const {
            return !(*this > rhs);
        }

        /// @brief  The greater than or equal to operator defined using the less than operator and inverted.
        /// @param  rhs - The right hand side of the comparison.
        constexpr bool operator >=(const type_id& rhs) const {
            return !(*this < rhs);
        }

        /// @brief  The inequality operator defined using the less than and greater than operators.
        /// @param  rhs - The right hand side of the comparison.
        constexpr bool operator !=(const type_id& rhs) const {
            return (*this < rhs) || (*this > rhs);
        }

        /// @brief  The equality operator defined using the inequality operator and inverted.
        /// @param  rhs - The right hand side of the comparison.
        constexpr bool operator ==(const type_id& rhs) const {
            return !(*this != rhs);
        }
    };
}

#endif // GTL_TYPE_ID_HPP
