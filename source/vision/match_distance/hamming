/*
Copyright (C) 2018-2022 Geoffrey Daniels. http://gpdaniels.com/

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License only.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#pragma once
#ifndef GTL_VISION_MATCH_DISTANCE_HAMMING_HPP
#define GTL_VISION_MATCH_DISTANCE_HAMMING_HPP

// Summary: Simple hamming matching without the popcount instruction. [wip]

namespace gtl {
    template<unsigned int bits>
    unsigned int hamming(
        const unsigned char* __restrict const data_lhs,
        const unsigned char* __restrict const data_rhs
    );

    template<>
    unsigned int hamming<8>(
        const unsigned char* __restrict const data_lhs,
        const unsigned char* __restrict const data_rhs
    )
    {
        constexpr static const unsigned char Ox01 = 0x01u;
        constexpr static const unsigned char Ox0F = 0x0Fu;
        constexpr static const unsigned char Ox33 = 0x33u;
        constexpr static const unsigned char Ox55 = 0x55u;

        const unsigned char* __restrict lhs = reinterpret_cast<const unsigned char*>(data_lhs);
        const unsigned char* __restrict rhs = reinterpret_cast<const unsigned char*>(data_rhs);

        unsigned int distance = 0;

        unsigned char difference = *lhs ^ *rhs;
        difference = difference - ((difference >> 1u) & Ox55);
        difference = (difference & Ox33) + ((difference >> 2u) & Ox33);
        distance += static_cast<unsigned char>(((difference + (difference >> 4u)) & Ox0F) * Ox01) >> 0u;

        return distance;
    }

    template<>
    unsigned int hamming<16>(
        const unsigned char* __restrict const data_lhs,
        const unsigned char* __restrict const data_rhs
    )
    {
        constexpr static const unsigned short int Ox01 = 0x0101u;
        constexpr static const unsigned short int Ox0F = 0x0F0Fu;
        constexpr static const unsigned short int Ox33 = 0x3333u;
        constexpr static const unsigned short int Ox55 = 0x5555u;

        const unsigned short int* __restrict lhs = reinterpret_cast<const unsigned short int*>(data_lhs);
        const unsigned short int* __restrict rhs = reinterpret_cast<const unsigned short int*>(data_rhs);

        unsigned int distance = 0;

        unsigned short int difference = *lhs ^ *rhs;
        difference = difference - ((difference >> 1u) & Ox55);
        difference = (difference & Ox33) + ((difference >> 2u) & Ox33);
        distance += static_cast<unsigned short>(((difference + (difference >> 4u)) & Ox0F) * Ox01) >> 8u;

        return distance;
    }

    template<>
    unsigned int hamming<32>(
        const unsigned char* __restrict const data_lhs,
        const unsigned char* __restrict const data_rhs
    )
    {
        constexpr static const unsigned int Ox01 = 0x01010101u;
        constexpr static const unsigned int Ox0F = 0x0F0F0F0Fu;
        constexpr static const unsigned int Ox33 = 0x33333333u;
        constexpr static const unsigned int Ox55 = 0x55555555u;

        const unsigned int* __restrict lhs = reinterpret_cast<const unsigned int*>(data_lhs);
        const unsigned int* __restrict rhs = reinterpret_cast<const unsigned int*>(data_rhs);

        unsigned int distance = 0;

        unsigned int difference = *lhs ^ *rhs;
        difference = difference - ((difference >> 1u) & Ox55);
        difference = (difference & Ox33) + ((difference >> 2u) & Ox33);
        distance += static_cast<unsigned int>(((difference + (difference >> 4u)) & Ox0F) * Ox01) >> 24u;

        return distance;
    }

    template<>
    unsigned int hamming<64>(
        const unsigned char* __restrict const data_lhs,
        const unsigned char* __restrict const data_rhs
    )
    {
        constexpr static const unsigned long long int Ox01 = 0x0101010101010101ull;
        constexpr static const unsigned long long int Ox0F = 0x0F0F0F0F0F0F0F0Full;
        constexpr static const unsigned long long int Ox33 = 0x3333333333333333ull;
        constexpr static const unsigned long long int Ox55 = 0x5555555555555555ull;

        const unsigned long long int* __restrict lhs = reinterpret_cast<const unsigned long long int*>(data_lhs);
        const unsigned long long int* __restrict rhs = reinterpret_cast<const unsigned long long int*>(data_rhs);

        unsigned int distance = 0;

        unsigned long long int difference = *lhs ^ *rhs;
        difference = difference - ((difference >> 1u) & Ox55);
        difference = (difference & Ox33) + ((difference >> 2u) & Ox33);
        distance += static_cast<unsigned long long int>(((difference + (difference >> 4u)) & Ox0F) * Ox01) >> 56u;

        return distance;
    }

    template<>
    unsigned int hamming<128>(
        const unsigned char* __restrict const data_lhs,
        const unsigned char* __restrict const data_rhs
    )
    {
        constexpr static const unsigned int Ox01 = 0x01010101u;
        constexpr static const unsigned int Ox0F = 0x0F0F0F0Fu;
        constexpr static const unsigned int Ox33 = 0x33333333u;
        constexpr static const unsigned int Ox55 = 0x55555555u;

        const unsigned int* __restrict lhs = reinterpret_cast<const unsigned int*>(data_lhs);
        const unsigned int* __restrict rhs = reinterpret_cast<const unsigned int*>(data_rhs);

        unsigned int distance = 0;

        for (int i = 0; i < 4; ++i, ++lhs, ++rhs) {
            unsigned int difference = *lhs ^ *rhs;
            difference = difference - ((difference >> 1u) & Ox55);
            difference = (difference & Ox33) + ((difference >> 2u) & Ox33);
            distance += static_cast<unsigned int>(((difference + (difference >> 4u)) & Ox0F) * Ox01) >> 24u;
        }

        return distance;
    }

    template<>
    unsigned int hamming<256>(
        const unsigned char* __restrict const data_lhs,
        const unsigned char* __restrict const data_rhs
    )
    {
        constexpr static const unsigned int Ox01 = 0x01010101u;
        constexpr static const unsigned int Ox0F = 0x0F0F0F0Fu;
        constexpr static const unsigned int Ox33 = 0x33333333u;
        constexpr static const unsigned int Ox55 = 0x55555555u;

        const unsigned int* __restrict lhs = reinterpret_cast<const unsigned int*>(data_lhs);
        const unsigned int* __restrict rhs = reinterpret_cast<const unsigned int*>(data_rhs);

        unsigned int distance = 0;

        for (int i = 0; i < 8; ++i, ++lhs, ++rhs) {
            unsigned int difference = *lhs ^ *rhs;
            difference = difference - ((difference >> 1u) & Ox55);
            difference = (difference & Ox33) + ((difference >> 2u) & Ox33);
            distance += static_cast<unsigned int>(((difference + (difference >> 4u)) & Ox0F) * Ox01) >> 24u;
        }

        return distance;
    }

    template<>
    unsigned int hamming<512>(
        const unsigned char* __restrict const data_lhs,
        const unsigned char* __restrict const data_rhs
    )
    {
        constexpr static const unsigned int Ox01 = 0x01010101u;
        constexpr static const unsigned int Ox0F = 0x0F0F0F0Fu;
        constexpr static const unsigned int Ox33 = 0x33333333u;
        constexpr static const unsigned int Ox55 = 0x55555555u;

        const unsigned int* __restrict lhs = reinterpret_cast<const unsigned int*>(data_lhs);
        const unsigned int* __restrict rhs = reinterpret_cast<const unsigned int*>(data_rhs);

        unsigned int distance = 0;

        for (int i = 0; i < 16; ++i, ++lhs, ++rhs) {
            unsigned int difference = *lhs ^ *rhs;
            difference = difference - ((difference >> 1u) & Ox55);
            difference = (difference & Ox33) + ((difference >> 2u) & Ox33);
            distance += static_cast<unsigned int>(((difference + (difference >> 4u)) & Ox0F) * Ox01) >> 24u;
        }

        return distance;
    }
}

#endif // GTL_VISION_MATCH_DISTANCE_HAMMING_HPP
