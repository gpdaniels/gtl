/*
Copyright (C) 2018-2024 Geoffrey Daniels. https://gpdaniels.com/

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License only.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#include <main.tests.hpp>
#include <optimise.tests.hpp>
#include <comparison.tests.hpp>
#include <require.tests.hpp>
#include <template.tests.hpp>

#include <crypto/chacha>

#if defined(_MSC_VER)
#   pragma warning(push, 0)
#endif

#include <string>
#include <type_traits>

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

static std::string hex_2_string(const unsigned char* hex, const unsigned int length) {
    std::string result;
    for (unsigned int i = 0; i < length; ++i) {
        result.push_back("0123456789ABCDEF"[hex[i] / 16]);
        result.push_back("0123456789ABCDEF"[hex[i] % 16]);
    }
    return result;
}

using chacha_types = testbench::value_collection<20>;
using chacha_modes = testbench::enum_collection<gtl::chacha_mode, gtl::chacha_mode::ctr_32, gtl::chacha_mode::ctr_64>;

TEST(chacha, traits, standard) {
    testbench::test_template<chacha_modes, chacha_types>(
        [](auto test_mode, auto test_value)->void {
            constexpr static const gtl::chacha_mode mode = decltype(test_mode)::value;
            constexpr static const unsigned long long int value = decltype(test_value)::value;

            REQUIRE((std::is_pod<gtl::chacha<mode, value>>::value == true));

            REQUIRE((std::is_trivial<gtl::chacha<mode, value>>::value == true));

            REQUIRE((std::is_trivially_copyable<gtl::chacha<mode, value>>::value == true));

            REQUIRE((std::is_standard_layout<gtl::chacha<mode, value>>::value == true));
        }
    );
}

TEST(chacha, constructor, empty) {
    testbench::test_template<chacha_modes, chacha_types>(
        [](auto test_mode, auto test_value)->void {
            constexpr static const gtl::chacha_mode mode = decltype(test_mode)::value;
            constexpr static const unsigned long long int value = decltype(test_value)::value;

            gtl::chacha<mode, value> chacha;
            testbench::do_not_optimise_away(chacha);
        }
    );
}

TEST(chacha, encrypt_decrypt, one_block) {
    testbench::test_template<chacha_modes, chacha_types>(
        [](auto test_mode, auto test_value)->void {
            constexpr static const gtl::chacha_mode mode = decltype(test_mode)::value;
            constexpr static const unsigned long long int value = decltype(test_value)::value;

            gtl::chacha<mode, value> chacha;
            constexpr static const unsigned int length = 64;
            unsigned char plain[length] =   {
                0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
                0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
                0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
                0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF
            };
            unsigned char key[chacha.key_size] =    {
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
            };

            unsigned char output[length];
            chacha.encrypt(plain, length, key, output);
            unsigned char input[length];
            chacha.decrypt(output, length, key, input);

            REQUIRE(testbench::is_memory_same(plain, input, length), "%s != %s\n", hex_2_string(plain, length).c_str(), hex_2_string(input, length).c_str());
        }
    );
}

TEST(chacha, encrypt_decrypt, one_block_padded) {
    testbench::test_template<chacha_modes, chacha_types>(
        [](auto test_mode, auto test_value)->void {
            constexpr static const gtl::chacha_mode mode = decltype(test_mode)::value;
            constexpr static const unsigned long long int value = decltype(test_value)::value;

            gtl::chacha<mode, value> chacha;
            constexpr static const unsigned int length = 64;
            unsigned char plain[length] =   {
                0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
                0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
                0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
                0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0x00
                // End byte replaced with a zero.
            };
            unsigned char key[chacha.key_size] =    {
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
            };

            unsigned char output[length];
            chacha.encrypt(plain, length, key, output);
            unsigned char input[length];
            chacha.decrypt(output, length, key, input);

            REQUIRE(testbench::is_memory_same(plain, input, length), "%s != %s\n", hex_2_string(plain, length).c_str(), hex_2_string(input, length).c_str());
        }
    );
}

TEST(chacha, encrypt_decrypt, two_blocks) {
    testbench::test_template<chacha_modes, chacha_types>(
        [](auto test_mode, auto test_value)->void {
            constexpr static const gtl::chacha_mode mode = decltype(test_mode)::value;
            constexpr static const unsigned long long int value = decltype(test_value)::value;

            gtl::chacha<mode, value> chacha;
            constexpr static const unsigned int length = 64*2;
            unsigned char plain[length] =   {
                0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
                0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
                0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
                0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,

                0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
                0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
                0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
                0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF
            };
            unsigned char key[chacha.key_size] =    {
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
            };

            unsigned char output[length];
            chacha.encrypt(plain, length, key, output);
            unsigned char input[length];
            chacha.decrypt(output, length, key, input);

            REQUIRE(testbench::is_memory_same(plain, input, length), "%s != %s\n", hex_2_string(plain, length).c_str(), hex_2_string(input, length).c_str());
        }
    );
}

TEST(chacha, encrypt_decrypt, two_blocks_padded) {
    testbench::test_template<chacha_modes, chacha_types>(
        [](auto test_mode, auto test_value)->void {
            constexpr static const gtl::chacha_mode mode = decltype(test_mode)::value;
            constexpr static const unsigned long long int value = decltype(test_value)::value;

            gtl::chacha<mode, value> chacha;
            constexpr static const unsigned int length = 64*2;
            unsigned char plain[length] =   {
                0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
                0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
                0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
                0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,

                0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            };
            unsigned char key[chacha.key_size] =    {
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
            };

            unsigned char output[length];
            chacha.encrypt(plain, length, key, output);
            unsigned char input[length];
            chacha.decrypt(output, length, key, input);

            REQUIRE(testbench::is_memory_same(plain, input, length), "%s != %s\n", hex_2_string(plain, length).c_str(), hex_2_string(input, length).c_str());
        }
    );
}

TEST(chacha, evaluate, verify_ctr_32_rounds_20) {
    gtl::chacha<gtl::chacha_mode::ctr_32, 20> chacha;
    constexpr static const unsigned int length = 64*2;
    const unsigned char plain[length] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    const unsigned char key[chacha.key_size] = {};
    const unsigned char encrypted[length] = {
        0x76, 0xB8, 0xE0, 0xAD, 0xA0, 0xF1, 0x3D, 0x90,
        0x40, 0x5D, 0x6A, 0xE5, 0x53, 0x86, 0xBD, 0x28,
        0xBD, 0xD2, 0x19, 0xB8, 0xA0, 0x8D, 0xED, 0x1A,
        0xA8, 0x36, 0xEF, 0xCC, 0x8B, 0x77, 0x0D, 0xC7,
        0xDA, 0x41, 0x59, 0x7C, 0x51, 0x57, 0x48, 0x8D,
        0x77, 0x24, 0xE0, 0x3F, 0xB8, 0xD8, 0x4A, 0x37,
        0x6A, 0x43, 0xB8, 0xF4, 0x15, 0x18, 0xA1, 0x1C,
        0xC3, 0x87, 0xB6, 0x69, 0xB2, 0xEE, 0x65, 0x86,

        0x9F, 0x07, 0xE7, 0xBE, 0x55, 0x51, 0x38, 0x7A,
        0x98, 0xBA, 0x97, 0x7C, 0x73, 0x2D, 0x08, 0x0D,
        0xCB, 0x0F, 0x29, 0xA0, 0x48, 0xE3, 0x65, 0x69,
        0x12, 0xC6, 0x53, 0x3E, 0x32, 0xEE, 0x7A, 0xED,
        0x29, 0xB7, 0x21, 0x76, 0x9C, 0xE6, 0x4E, 0x43,
        0xD5, 0x71, 0x33, 0xB0, 0x74, 0xD8, 0x39, 0xD5,
        0x31, 0xED, 0x1F, 0x28, 0x51, 0x0A, 0xFB, 0x45,
        0xAC, 0xE1, 0x0A, 0x1F, 0x4B, 0x79, 0x4D, 0x6F
    };

    unsigned char output_encrypt[length];
    chacha.encrypt(plain, length, key, output_encrypt);
    REQUIRE(testbench::is_memory_same(encrypted, output_encrypt, length), "%s != %s\n", hex_2_string(encrypted, length).c_str(), hex_2_string(output_encrypt, length).c_str());

    // Decryption is the same process.
    unsigned char output_decrypt[length];
    chacha.decrypt(output_encrypt, length, key, output_decrypt);
    REQUIRE(testbench::is_memory_same(plain, output_decrypt, length), "%s != %s\n", hex_2_string(plain, length).c_str(), hex_2_string(output_decrypt, length).c_str());
}

TEST(chacha, evaluate, verify_ctr_64_rounds_20) {
    gtl::chacha<gtl::chacha_mode::ctr_64, 20> chacha;
    constexpr static const unsigned int length = 64*2;
    const unsigned char plain[length] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    const unsigned char key[chacha.key_size] = {};
    const unsigned char encrypted[length] = {
        0x76, 0xB8, 0xE0, 0xAD, 0xA0, 0xF1, 0x3D, 0x90,
        0x40, 0x5D, 0x6A, 0xE5, 0x53, 0x86, 0xBD, 0x28,
        0xBD, 0xD2, 0x19, 0xB8, 0xA0, 0x8D, 0xED, 0x1A,
        0xA8, 0x36, 0xEF, 0xCC, 0x8B, 0x77, 0x0D, 0xC7,
        0xDA, 0x41, 0x59, 0x7C, 0x51, 0x57, 0x48, 0x8D,
        0x77, 0x24, 0xE0, 0x3F, 0xB8, 0xD8, 0x4A, 0x37,
        0x6A, 0x43, 0xB8, 0xF4, 0x15, 0x18, 0xA1, 0x1C,
        0xC3, 0x87, 0xB6, 0x69, 0xB2, 0xEE, 0x65, 0x86,

        0x9F, 0x07, 0xE7, 0xBE, 0x55, 0x51, 0x38, 0x7A,
        0x98, 0xBA, 0x97, 0x7C, 0x73, 0x2D, 0x08, 0x0D,
        0xCB, 0x0F, 0x29, 0xA0, 0x48, 0xE3, 0x65, 0x69,
        0x12, 0xC6, 0x53, 0x3E, 0x32, 0xEE, 0x7A, 0xED,
        0x29, 0xB7, 0x21, 0x76, 0x9C, 0xE6, 0x4E, 0x43,
        0xD5, 0x71, 0x33, 0xB0, 0x74, 0xD8, 0x39, 0xD5,
        0x31, 0xED, 0x1F, 0x28, 0x51, 0x0A, 0xFB, 0x45,
        0xAC, 0xE1, 0x0A, 0x1F, 0x4B, 0x79, 0x4D, 0x6F
    };

    unsigned char output_encrypt[length];
    chacha.encrypt(plain, length, key, output_encrypt);
    REQUIRE(testbench::is_memory_same(encrypted, output_encrypt, length), "%s != %s\n", hex_2_string(encrypted, length).c_str(), hex_2_string(output_encrypt, length).c_str());

    // Decryption is the same process.
    unsigned char output_decrypt[length];
    chacha.decrypt(output_encrypt, length, key, output_decrypt);
    REQUIRE(testbench::is_memory_same(plain, output_decrypt, length), "%s != %s\n", hex_2_string(plain, length).c_str(), hex_2_string(output_decrypt, length).c_str());
}

TEST(chacha, evaluate, verify_ctr_32_rounds_20_key) {
    gtl::chacha<gtl::chacha_mode::ctr_32, 20> chacha;
    constexpr static const unsigned int length = 64*2;
    const unsigned char plain[length] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    const unsigned char key[chacha.key_size] = {
        0xC4, 0x6E, 0xC1, 0xB1, 0x8C, 0xE8, 0xA8, 0x78,
        0x72, 0x5A, 0x37, 0xE7, 0x80, 0xDF, 0xB7, 0x35,
        0x1F, 0x68, 0xED, 0x2E, 0x19, 0x4C, 0x79, 0xFB,
        0xC6, 0xAE, 0xBE, 0xE1, 0xA6, 0x67, 0x97, 0x5D,
    };
    const unsigned char nonce[chacha.nonce_size] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1A, 0xDA, 0x31, 0xD5, 0xCF, 0x68, 0x82, 0x21
    };
    const unsigned char encrypted[length] = {
        0xF6, 0x3A, 0x89, 0xB7, 0x5C, 0x22, 0x71, 0xF9,
        0x36, 0x88, 0x16, 0x54, 0x2B, 0xA5, 0x2F, 0x06,
        0xED, 0x49, 0x24, 0x17, 0x92, 0x30, 0x2B, 0x00,
        0xB5, 0xE8, 0xF8, 0x0A, 0xE9, 0xA4, 0x73, 0xAF,
        0xC2, 0x5B, 0x21, 0x8F, 0x51, 0x9A, 0xF0, 0xFD,
        0xD4, 0x06, 0x36, 0x2E, 0x8D, 0x69, 0xDE, 0x7F,
        0x54, 0xC6, 0x04, 0xA6, 0xE0, 0x0F, 0x35, 0x3F,
        0x11, 0x0F, 0x77, 0x1B, 0xDC, 0xA8, 0xAB, 0x92,

        0xE5, 0xFB, 0xC3, 0x4E, 0x60, 0xA1, 0xD9, 0xA9,
        0xDB, 0x17, 0x34, 0x5B, 0x0A, 0x40, 0x27, 0x36,
        0x85, 0x3B, 0xF9, 0x10, 0xB0, 0x60, 0xBD, 0xF1,
        0xF8, 0x97, 0xB6, 0x29, 0x0F, 0x01, 0xD1, 0x38,
        0xAE, 0x2C, 0x4C, 0x90, 0x22, 0x5B, 0xA9, 0xEA,
        0x14, 0xD5, 0x18, 0xF5, 0x59, 0x29, 0xDE, 0xA0,
        0x98, 0xCA, 0x7A, 0x6C, 0xCF, 0xE6, 0x12, 0x27,
        0x05, 0x3C, 0x84, 0xE4, 0x9A, 0x4A, 0x33, 0x32
    };

    unsigned char output_encrypt[length];
    chacha.encrypt(plain, length, key, nonce, output_encrypt);
    REQUIRE(testbench::is_memory_same(encrypted, output_encrypt, length), "%s != %s\n", hex_2_string(encrypted, length).c_str(), hex_2_string(output_encrypt, length).c_str());

    // Decryption is the same process.
    unsigned char output_decrypt[length];
    chacha.decrypt(output_encrypt, length, key, nonce, output_decrypt);
    REQUIRE(testbench::is_memory_same(plain, output_decrypt, length), "%s != %s\n", hex_2_string(plain, length).c_str(), hex_2_string(output_decrypt, length).c_str());
}

TEST(chacha, evaluate, verify_ctr_64_rounds_20_key) {
    gtl::chacha<gtl::chacha_mode::ctr_64, 20> chacha;
    constexpr static const unsigned int length = 64*2;
    const unsigned char plain[length] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    const unsigned char key[chacha.key_size] = {
        0xC4, 0x6E, 0xC1, 0xB1, 0x8C, 0xE8, 0xA8, 0x78,
        0x72, 0x5A, 0x37, 0xE7, 0x80, 0xDF, 0xB7, 0x35,
        0x1F, 0x68, 0xED, 0x2E, 0x19, 0x4C, 0x79, 0xFB,
        0xC6, 0xAE, 0xBE, 0xE1, 0xA6, 0x67, 0x97, 0x5D,
    };
    const unsigned char nonce[chacha.nonce_size] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1A, 0xDA, 0x31, 0xD5, 0xCF, 0x68, 0x82, 0x21
    };
    const unsigned char encrypted[length] = {
        0xF6, 0x3A, 0x89, 0xB7, 0x5C, 0x22, 0x71, 0xF9,
        0x36, 0x88, 0x16, 0x54, 0x2B, 0xA5, 0x2F, 0x06,
        0xED, 0x49, 0x24, 0x17, 0x92, 0x30, 0x2B, 0x00,
        0xB5, 0xE8, 0xF8, 0x0A, 0xE9, 0xA4, 0x73, 0xAF,
        0xC2, 0x5B, 0x21, 0x8F, 0x51, 0x9A, 0xF0, 0xFD,
        0xD4, 0x06, 0x36, 0x2E, 0x8D, 0x69, 0xDE, 0x7F,
        0x54, 0xC6, 0x04, 0xA6, 0xE0, 0x0F, 0x35, 0x3F,
        0x11, 0x0F, 0x77, 0x1B, 0xDC, 0xA8, 0xAB, 0x92,

        0xE5, 0xFB, 0xC3, 0x4E, 0x60, 0xA1, 0xD9, 0xA9,
        0xDB, 0x17, 0x34, 0x5B, 0x0A, 0x40, 0x27, 0x36,
        0x85, 0x3B, 0xF9, 0x10, 0xB0, 0x60, 0xBD, 0xF1,
        0xF8, 0x97, 0xB6, 0x29, 0x0F, 0x01, 0xD1, 0x38,
        0xAE, 0x2C, 0x4C, 0x90, 0x22, 0x5B, 0xA9, 0xEA,
        0x14, 0xD5, 0x18, 0xF5, 0x59, 0x29, 0xDE, 0xA0,
        0x98, 0xCA, 0x7A, 0x6C, 0xCF, 0xE6, 0x12, 0x27,
        0x05, 0x3C, 0x84, 0xE4, 0x9A, 0x4A, 0x33, 0x32
    };

    unsigned char output_encrypt[length];
    chacha.encrypt(plain, length, key, nonce, output_encrypt);
    REQUIRE(testbench::is_memory_same(encrypted, output_encrypt, length), "%s != %s\n", hex_2_string(encrypted, length).c_str(), hex_2_string(output_encrypt, length).c_str());

    // Decryption is the same process.
    unsigned char output_decrypt[length];
    chacha.decrypt(output_encrypt, length, key, nonce, output_decrypt);
    REQUIRE(testbench::is_memory_same(plain, output_decrypt, length), "%s != %s\n", hex_2_string(plain, length).c_str(), hex_2_string(output_decrypt, length).c_str());
}

TEST(chacha, evaluate, verify_ctr_32_rounds_20_data) {
    gtl::chacha<gtl::chacha_mode::ctr_32, 20> chacha;
    constexpr static const unsigned int length = 64*2;
    const unsigned char plain[length] = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
        0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,

        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
        0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
        0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
        0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
        0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
        0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
        0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
        0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
    };
    const unsigned char key[chacha.key_size] = {
        0xC4, 0x6E, 0xC1, 0xB1, 0x8C, 0xE8, 0xA8, 0x78,
        0x72, 0x5A, 0x37, 0xE7, 0x80, 0xDF, 0xB7, 0x35,
        0x1F, 0x68, 0xED, 0x2E, 0x19, 0x4C, 0x79, 0xFB,
        0xC6, 0xAE, 0xBE, 0xE1, 0xA6, 0x67, 0x97, 0x5D,
    };
    const unsigned char nonce[chacha.nonce_size] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1A, 0xDA, 0x31, 0xD5, 0xCF, 0x68, 0x82, 0x21
    };
    const unsigned char keystream[length] = {
        0xF6, 0x3A, 0x89, 0xB7, 0x5C, 0x22, 0x71, 0xF9,
        0x36, 0x88, 0x16, 0x54, 0x2B, 0xA5, 0x2F, 0x06,
        0xED, 0x49, 0x24, 0x17, 0x92, 0x30, 0x2B, 0x00,
        0xB5, 0xE8, 0xF8, 0x0A, 0xE9, 0xA4, 0x73, 0xAF,
        0xC2, 0x5B, 0x21, 0x8F, 0x51, 0x9A, 0xF0, 0xFD,
        0xD4, 0x06, 0x36, 0x2E, 0x8D, 0x69, 0xDE, 0x7F,
        0x54, 0xC6, 0x04, 0xA6, 0xE0, 0x0F, 0x35, 0x3F,
        0x11, 0x0F, 0x77, 0x1B, 0xDC, 0xA8, 0xAB, 0x92,

        0xE5, 0xFB, 0xC3, 0x4E, 0x60, 0xA1, 0xD9, 0xA9,
        0xDB, 0x17, 0x34, 0x5B, 0x0A, 0x40, 0x27, 0x36,
        0x85, 0x3B, 0xF9, 0x10, 0xB0, 0x60, 0xBD, 0xF1,
        0xF8, 0x97, 0xB6, 0x29, 0x0F, 0x01, 0xD1, 0x38,
        0xAE, 0x2C, 0x4C, 0x90, 0x22, 0x5B, 0xA9, 0xEA,
        0x14, 0xD5, 0x18, 0xF5, 0x59, 0x29, 0xDE, 0xA0,
        0x98, 0xCA, 0x7A, 0x6C, 0xCF, 0xE6, 0x12, 0x27,
        0x05, 0x3C, 0x84, 0xE4, 0x9A, 0x4A, 0x33, 0x32
    };
    unsigned char encrypted[length];
    for (unsigned int i = 0; i < length; ++i) {
        encrypted[i] = plain[i] ^ keystream[i];
    }

    unsigned char output_encrypt[length];
    chacha.encrypt(plain, length, key, nonce, output_encrypt);
    REQUIRE(testbench::is_memory_same(encrypted, output_encrypt, length), "%s != %s\n", hex_2_string(encrypted, length).c_str(), hex_2_string(output_encrypt, length).c_str());

    // Decryption is the same process.
    unsigned char output_decrypt[length];
    chacha.decrypt(output_encrypt, length, key, nonce, output_decrypt);
    REQUIRE(testbench::is_memory_same(plain, output_decrypt, length), "%s != %s\n", hex_2_string(plain, length).c_str(), hex_2_string(output_decrypt, length).c_str());
}

TEST(chacha, evaluate, verify_ctr_64_rounds_20_data) {
    gtl::chacha<gtl::chacha_mode::ctr_64, 20> chacha;
    constexpr static const unsigned int length = 64*2;
    const unsigned char plain[length] = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
        0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,

        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
        0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
        0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
        0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
        0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
        0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
        0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
        0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
    };
    const unsigned char key[chacha.key_size] = {
        0xC4, 0x6E, 0xC1, 0xB1, 0x8C, 0xE8, 0xA8, 0x78,
        0x72, 0x5A, 0x37, 0xE7, 0x80, 0xDF, 0xB7, 0x35,
        0x1F, 0x68, 0xED, 0x2E, 0x19, 0x4C, 0x79, 0xFB,
        0xC6, 0xAE, 0xBE, 0xE1, 0xA6, 0x67, 0x97, 0x5D,
    };
    const unsigned char nonce[chacha.nonce_size] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1A, 0xDA, 0x31, 0xD5, 0xCF, 0x68, 0x82, 0x21
    };
    const unsigned char keystream[length] = {
        0xF6, 0x3A, 0x89, 0xB7, 0x5C, 0x22, 0x71, 0xF9,
        0x36, 0x88, 0x16, 0x54, 0x2B, 0xA5, 0x2F, 0x06,
        0xED, 0x49, 0x24, 0x17, 0x92, 0x30, 0x2B, 0x00,
        0xB5, 0xE8, 0xF8, 0x0A, 0xE9, 0xA4, 0x73, 0xAF,
        0xC2, 0x5B, 0x21, 0x8F, 0x51, 0x9A, 0xF0, 0xFD,
        0xD4, 0x06, 0x36, 0x2E, 0x8D, 0x69, 0xDE, 0x7F,
        0x54, 0xC6, 0x04, 0xA6, 0xE0, 0x0F, 0x35, 0x3F,
        0x11, 0x0F, 0x77, 0x1B, 0xDC, 0xA8, 0xAB, 0x92,

        0xE5, 0xFB, 0xC3, 0x4E, 0x60, 0xA1, 0xD9, 0xA9,
        0xDB, 0x17, 0x34, 0x5B, 0x0A, 0x40, 0x27, 0x36,
        0x85, 0x3B, 0xF9, 0x10, 0xB0, 0x60, 0xBD, 0xF1,
        0xF8, 0x97, 0xB6, 0x29, 0x0F, 0x01, 0xD1, 0x38,
        0xAE, 0x2C, 0x4C, 0x90, 0x22, 0x5B, 0xA9, 0xEA,
        0x14, 0xD5, 0x18, 0xF5, 0x59, 0x29, 0xDE, 0xA0,
        0x98, 0xCA, 0x7A, 0x6C, 0xCF, 0xE6, 0x12, 0x27,
        0x05, 0x3C, 0x84, 0xE4, 0x9A, 0x4A, 0x33, 0x32
    };
    unsigned char encrypted[length];
    for (unsigned int i = 0; i < length; ++i) {
        encrypted[i] = plain[i] ^ keystream[i];
    }

    unsigned char output_encrypt[length];
    chacha.encrypt(plain, length, key, nonce, output_encrypt);
    REQUIRE(testbench::is_memory_same(encrypted, output_encrypt, length), "%s != %s\n", hex_2_string(encrypted, length).c_str(), hex_2_string(output_encrypt, length).c_str());

    // Decryption is the same process.
    unsigned char output_decrypt[length];
    chacha.decrypt(output_encrypt, length, key, nonce, output_decrypt);
    REQUIRE(testbench::is_memory_same(plain, output_decrypt, length), "%s != %s\n", hex_2_string(plain, length).c_str(), hex_2_string(output_decrypt, length).c_str());
}
