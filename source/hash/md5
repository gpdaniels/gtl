/*
Copyright (C) 2018-2022 Geoffrey Daniels. http://gpdaniels.com/

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License only.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#pragma once
#ifndef GTL_HASH_MD5_HPP
#define GTL_HASH_MD5_HPP

// Summary: An implementation of the md5 hashing function.

#ifndef NDEBUG
#   if defined(_MSC_VER)
#       define __builtin_trap() __debugbreak()
#   endif
/// @brief A simple assert macro to break the program if the md5 is misused.
#   define GTL_MD5_ASSERT(ASSERTION, MESSAGE) static_cast<void>((ASSERTION) || (__builtin_trap(), 0))
#else
/// @brief At release time the assert macro is implemented as a nop.
#   define GTL_MD5_ASSERT(ASSERTION, MESSAGE) static_cast<void>(0)
#endif

namespace gtl {
    /// @brief  The md5 class computes and MD5 hash of a sequence of data.
    class md5 final {
    public:
        /// @brief  Handy variable for accessing the size in bits.
        constexpr static const unsigned long long int size = 128;

        /// @brief  Size of the hash in bytes.
        constexpr static const unsigned long long int hash_size = md5::size / 8;

        /// @brief  Internal size of each processed block of data in bytes.
        constexpr static const unsigned long long int block_size = 64;

        /// @brief  Number of rounds used to process each block of data.
        constexpr static const unsigned long long int processing_rounds = 64;

    public:
        /// @brief  Simple type to hold the hash data.
        struct hash_type final {
            unsigned int data[md5::hash_size / sizeof(unsigned int)] = {
                0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476
            };
        };

    private:
        /// @brief  Internal type used to construct blocks of data for processing.
        struct block_type final {
            unsigned long long int length_bytes = 0;
            unsigned int data[md5::block_size / sizeof(unsigned int)] = {};
        };

    private:
        /// @brief  The binary integer part of the sines of integers are use as constants.
        /// This can be computed using:
        /// for (int i = 0; i < 64; ++i) {
        ///     constants[i] := floor(232 x abs(sin(i + 1)))
        /// }
        constexpr static const unsigned int constants[md5::processing_rounds] = {
            0xD76AA478, 0xE8C7B756, 0x242070DB, 0xC1BDCEEE,
            0xF57C0FAF, 0x4787C62A, 0xA8304613, 0xFD469501,
            0x698098D8, 0x8B44F7AF, 0xFFFF5BB1, 0x895CD7BE,
            0x6B901122, 0xFD987193, 0xA679438E, 0x49B40821,
            0xF61E2562, 0xC040B340, 0x265E5A51, 0xE9B6C7AA,
            0xD62F105D, 0x02441453, 0xD8A1E681, 0xE7D3FBC8,
            0x21E1CDE6, 0xC33707D6, 0xF4D50D87, 0x455A14ED,
            0xA9E3E905, 0xFCEFA3F8, 0x676F02D9, 0x8D2A4C8A,
            0xFFFA3942, 0x8771F681, 0x6D9D6122, 0xFDE5380C,
            0xA4BEEA44, 0x4BDECFA9, 0xF6BB4B60, 0xBEBFBC70,
            0x289B7EC6, 0xEAA127FA, 0xD4EF3085, 0x04881D05,
            0xD9D4D039, 0xE6DB99E5, 0x1FA27CF8, 0xC4AC5665,
            0xF4292244, 0x432AFF97, 0xAB9423A7, 0xFC93A039,
            0x655B59C3, 0x8F0CCC92, 0xFFEFF47D, 0x85845DD1,
            0x6FA87E4F, 0xFE2CE6E0, 0xA3014314, 0x4E0811A1,
            0xF7537E82, 0xBD3AF235, 0x2AD7D2BB, 0xEB86D391
        };

        /// @brief  The per round shift amounts for the MD5 algorithm.
        constexpr static const unsigned int per_round_shift_amount[md5::processing_rounds] = {
            7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,
            5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,
            4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,
            6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21
        };

    private:
        /// @brief  The number of bytes of data that have been hashed.
        unsigned long long int hashed_length = 0;

        /// @brief  The current block of data being filled.
        block_type block = {};

        /// @brief  The current hash.
        hash_type hash = {};

        /// @brief  Flag showing whether the hash has been finalised.
        bool finalised = false;

    private:
        /// @brief  Rotate a 32 bit value left by a shift amount.
        /// @param  value The value to rotate.
        /// @param  shift The number of bits to rotate by.
        /// @return The value after it has been rotated left by shift bits.
        constexpr static unsigned int rotate_left(unsigned int value, unsigned int shift) {
            constexpr const unsigned int mask = (8 * sizeof(unsigned int) - 1);
            shift &= mask;
            return (value << shift) | (value >> ((static_cast<unsigned int>(-static_cast<signed int>(shift))) & mask));
        }

    private:
        /// @brief  Perform the hashing algorithm on a block of data.
        constexpr void hash_block() {
            unsigned int A = this->hash.data[0];
            unsigned int B = this->hash.data[1];
            unsigned int C = this->hash.data[2];
            unsigned int D = this->hash.data[3];

            // Do the hash iterations.
            for (unsigned int iteration = 0; iteration < md5::processing_rounds; ++iteration) {

                unsigned int F = 0;
                unsigned int G = 0;

                if (iteration < 16) {
                    F = (B & C) | ((~B) & D);
                    G = iteration;
                }
                else if (iteration < 32) {
                    F = (D & B) | ((~D) & C);
                    G = (5 * iteration + 1) & 0xF;
                }
                else if (iteration < 48) {
                    F = B ^ C ^ D;
                    G = (3 * iteration + 5) & 0xF;
                }
                else {
                    F = C ^ (B | (~D));
                    G = (7 * iteration) & 0xF;
                }

                unsigned int next_A = D;
                D = C;
                C = B;
                B += rotate_left(A + F + md5::constants[iteration] + this->block.data[G], md5::per_round_shift_amount[iteration]);
                A = next_A;
            }

            this->hash.data[0] += A;
            this->hash.data[1] += B;
            this->hash.data[2] += C;
            this->hash.data[3] += D;
        }

    public:
        /// @brief  Reset the internal state of the hash.
        constexpr void reset() {
            this->hashed_length = 0;
            this->block = {};
            this->hash = {};
            this->finalised = false;
        }

        /// @brief  Consume data, constructing blocks and hashing as needed.
        /// @param  data Input data pointer.
        /// @param  length Valid length of the input data pointer.
        constexpr void consume(const char* data, unsigned long long int length) {
            GTL_MD5_ASSERT(this->finalised == false, "Finalise must not be called before consume().");

            // Count how much data has been consumed.
            this->hashed_length += length;

            // Block construction and processing.
            while (length--) {
                // Append data to the current block.
                this->block.data[this->block.length_bytes / sizeof(unsigned int)] |= static_cast<unsigned int>(static_cast<unsigned char>(*data++)) << ((this->block.length_bytes % sizeof(unsigned int)) * 8);
                ++this->block.length_bytes;

                // If full, hash.
                if (this->block.length_bytes == md5::block_size) {
                    this->hash_block();
                    this->block = {};
                }
            }
        }

        /// @brief  Finishes processing any remaining buffered data.
        constexpr void finalise() {
            GTL_MD5_ASSERT(this->finalised == false, "Finalise must not be called before finalise().");

            // Pad the data with a single 0x80 on the end.
            this->block.data[this->block.length_bytes / sizeof(unsigned int)] |= static_cast<unsigned int>(static_cast<unsigned char>(0x80)) << ((this->block.length_bytes % sizeof(unsigned int)) * 8);
            ++this->block.length_bytes;

            // Check if there is enough space in the final chunk for the data length.
            if (this->block.length_bytes > (md5::block_size - sizeof(unsigned long long int))) {
                this->hash_block();
                this->block = {};
            }

            // Add the data length to the chunk (Must be little endian).
            const unsigned long long int hashed_length_bits = this->hashed_length * 8;
            this->block.data[14] = (hashed_length_bits & 0x00000000FFFFFFFFull) >> 0u;
            this->block.data[15] = (hashed_length_bits & 0xFFFFFFFF00000000ull) >> 32u;

            // Hash the block.
            this->hash_block();

            // Process the hash to fix it's endianness.
            for (unsigned int index = 0; index < (md5::hash_size / sizeof(unsigned int)); ++index) {
                this->hash.data[index] = (this->hash.data[index] >> 24) | ((this->hash.data[index] >>  8) & 0x0000FF00) | ((this->hash.data[index] <<  8) & 0x00FF0000) | (this->hash.data[index] << 24);
            }

            this->finalised = true;
        }

        /// @brief  Calculate the final hash from the state and return it.
        /// @return The resultant hash.
        constexpr const hash_type& get_hash() const {
            GTL_MD5_ASSERT(this->finalised == true, "Finalise must be called before get_hash().");
            return this->hash;
        }

    public:
        /// @brief  Simple type to hold the string representation of the hash.
        struct hash_string_type final {
            char hash[(md5::hash_size * 2) + 1] = {};
        };

        /// @brief  Convert a hash into its string representation.
        /// @param  hash The hash to convert.
        /// @return The string representation of the hash, with null termination.
        constexpr static hash_string_type hash_to_string(const hash_type& hash) {
            hash_string_type output;
            constexpr const char* hex_characters = "0123456789ABCDEF";
            for (unsigned int index = 0u; index < (md5::hash_size * 2); ++index) {
                output.hash[index] = hex_characters[(hash.data[index / (sizeof(unsigned int) * 2)] >> ((((sizeof(unsigned int) * 2) - 1) - (index % (sizeof(unsigned int) * 2))) * 4)) & 0xF];
            }
            output.hash[md5::hash_size * 2] = 0;
            return output;
        }
        
    public:
        /// @brief  Hash a buffer of data.
        /// @param  data Input data pointer.
        /// @param  length Valid length of the input data pointer.
        static hash_type hash_buffer(const char* data, const unsigned long long int length) {
            md5 hash_function;
            hash_function.reset();
            hash_function.consume(data, length);
            hash_function.finalise();
            return hash_function.get_hash();
        }
    };
}

#undef GTL_MD5_ASSERT

#endif // GTL_HASH_MD5_HPP
