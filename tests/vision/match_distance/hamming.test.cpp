/*
Copyright (C) 2018-2022 Geoffrey Daniels. https://gpdaniels.com/

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License only.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#include <main.tests.hpp>
#include <optimise.tests.hpp>
#include <require.tests.hpp>

#include <vision/match_distance/hamming>

#if defined(_MSC_VER)
#   pragma warning(push, 0)
#endif

#include <type_traits>

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

TEST(hamming, function, size_8) {
    unsigned char lhs;
    unsigned char rhs;
    unsigned char* data_lhs = reinterpret_cast<unsigned char*>(&lhs);
    unsigned char* data_rhs = reinterpret_cast<unsigned char*>(&rhs);

    lhs = 0b00000000;
    rhs = 0b00000000;
    REQUIRE(gtl::hamming<8>(data_lhs, data_rhs) == 0);

    lhs = 0b00001111;
    rhs = 0b00001111;
    REQUIRE(gtl::hamming<8>(data_lhs, data_rhs) == 0);

    lhs = 0b11110000;
    rhs = 0b11110000;
    REQUIRE(gtl::hamming<8>(data_lhs, data_rhs) == 0);

    lhs = 0b11111111;
    rhs = 0b11111111;
    REQUIRE(gtl::hamming<8>(data_lhs, data_rhs) == 0);

    lhs = 0b11111111;
    rhs = 0b00000000;
    REQUIRE(gtl::hamming<8>(data_lhs, data_rhs) == 8);

    lhs = 0b00000000;
    rhs = 0b11111111;
    REQUIRE(gtl::hamming<8>(data_lhs, data_rhs) == 8);

    lhs = 0b00001111;
    rhs = 0b11110000;
    REQUIRE(gtl::hamming<8>(data_lhs, data_rhs) == 8);

    lhs = 0b11110000;
    rhs = 0b00001111;
    REQUIRE(gtl::hamming<8>(data_lhs, data_rhs) == 8);

    lhs = 0b00000001;
    rhs = 0b00000000;
    while (lhs != 0) {
        REQUIRE(gtl::hamming<8>(data_lhs, data_rhs) == 1);
        lhs <<= 1;
    }

    lhs = 0b00000000;
    rhs = 0b00000001;
    while (rhs != 0) {
        REQUIRE(gtl::hamming<8>(data_lhs, data_rhs) == 1);
        rhs <<= 1;
    }

    lhs = 0b00000001;
    rhs = 0b00000001;
    while (lhs != 0) {
        REQUIRE(gtl::hamming<8>(data_lhs, data_rhs) == 0);
        lhs <<= 1;
        rhs <<= 1;
    }
}

TEST(hamming, function, size_16) {
    unsigned short int lhs;
    unsigned short int rhs;
    unsigned char* data_lhs = reinterpret_cast<unsigned char*>(&lhs);
    unsigned char* data_rhs = reinterpret_cast<unsigned char*>(&rhs);

    lhs = 0b0000000000000000;
    rhs = 0b0000000000000000;
    REQUIRE(gtl::hamming<16>(data_lhs, data_rhs) == 0);

    lhs = 0b0000111100001111;
    rhs = 0b0000111100001111;
    REQUIRE(gtl::hamming<16>(data_lhs, data_rhs) == 0);

    lhs = 0b1111000011110000;
    rhs = 0b1111000011110000;
    REQUIRE(gtl::hamming<16>(data_lhs, data_rhs) == 0);

    lhs = 0b1111111111111111;
    rhs = 0b1111111111111111;
    REQUIRE(gtl::hamming<16>(data_lhs, data_rhs) == 0);

    lhs = 0b1111111111111111;
    rhs = 0b0000000000000000;
    REQUIRE(gtl::hamming<16>(data_lhs, data_rhs) == 16);

    lhs = 0b0000000000000000;
    rhs = 0b1111111111111111;
    REQUIRE(gtl::hamming<16>(data_lhs, data_rhs) == 16);

    lhs = 0b0000111100001111;
    rhs = 0b1111000011110000;
    REQUIRE(gtl::hamming<16>(data_lhs, data_rhs) == 16);

    lhs = 0b1111000011110000;
    rhs = 0b0000111100001111;
    REQUIRE(gtl::hamming<16>(data_lhs, data_rhs) == 16);

    lhs = 0b0000000000000001;
    rhs = 0b0000000000000000;
    while (lhs != 0) {
        REQUIRE(gtl::hamming<16>(data_lhs, data_rhs) == 1);
        lhs <<= 1;
    }

    lhs = 0b0000000000000000;
    rhs = 0b0000000000000001;
    while (rhs != 0) {
        REQUIRE(gtl::hamming<16>(data_lhs, data_rhs) == 1);
        rhs <<= 1;
    }

    lhs = 0b0000000000000001;
    rhs = 0b0000000000000001;
    while (lhs != 0) {
        REQUIRE(gtl::hamming<16>(data_lhs, data_rhs) == 0);
        lhs <<= 1;
        rhs <<= 1;
    }
}

TEST(hamming, function, size_32) {
    unsigned int lhs;
    unsigned int rhs;
    unsigned char* data_lhs = reinterpret_cast<unsigned char*>(&lhs);
    unsigned char* data_rhs = reinterpret_cast<unsigned char*>(&rhs);

    lhs = 0b00000000000000000000000000000000;
    rhs = 0b00000000000000000000000000000000;
    REQUIRE(gtl::hamming<32>(data_lhs, data_rhs) == 0);

    lhs = 0b00001111000011110000111100001111;
    rhs = 0b00001111000011110000111100001111;
    REQUIRE(gtl::hamming<32>(data_lhs, data_rhs) == 0);

    lhs = 0b11110000111100001111000011110000;
    rhs = 0b11110000111100001111000011110000;
    REQUIRE(gtl::hamming<32>(data_lhs, data_rhs) == 0);

    lhs = 0b11111111111111111111111111111111;
    rhs = 0b11111111111111111111111111111111;
    REQUIRE(gtl::hamming<32>(data_lhs, data_rhs) == 0);

    lhs = 0b11111111111111111111111111111111;
    rhs = 0b00000000000000000000000000000000;
    REQUIRE(gtl::hamming<32>(data_lhs, data_rhs) == 32);

    lhs = 0b00000000000000000000000000000000;
    rhs = 0b11111111111111111111111111111111;
    REQUIRE(gtl::hamming<32>(data_lhs, data_rhs) == 32);

    lhs = 0b00001111000011110000111100001111;
    rhs = 0b11110000111100001111000011110000;
    REQUIRE(gtl::hamming<32>(data_lhs, data_rhs) == 32);

    lhs = 0b11110000111100001111000011110000;
    rhs = 0b00001111000011110000111100001111;
    REQUIRE(gtl::hamming<32>(data_lhs, data_rhs) == 32);

    lhs = 0b00000000000000000000000000000001;
    rhs = 0b00000000000000000000000000000000;
    while (lhs != 0) {
        REQUIRE(gtl::hamming<32>(data_lhs, data_rhs) == 1);
        lhs <<= 1;
    }

    lhs = 0b00000000000000000000000000000000;
    rhs = 0b00000000000000000000000000000001;
    while (rhs != 0) {
        REQUIRE(gtl::hamming<32>(data_lhs, data_rhs) == 1);
        rhs <<= 1;
    }

    lhs = 0b00000000000000000000000000000001;
    rhs = 0b00000000000000000000000000000001;
    while (lhs != 0) {
        REQUIRE(gtl::hamming<32>(data_lhs, data_rhs) == 0);
        lhs <<= 1;
        rhs <<= 1;
    }
}

TEST(hamming, function, size_64) {
    unsigned long long int lhs;
    unsigned long long int rhs;
    unsigned char* data_lhs = reinterpret_cast<unsigned char*>(&lhs);
    unsigned char* data_rhs = reinterpret_cast<unsigned char*>(&rhs);

    lhs = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs = 0b0000000000000000000000000000000000000000000000000000000000000000;
    REQUIRE(gtl::hamming<64>(data_lhs, data_rhs) == 0);

    lhs = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs = 0b0000111100001111000011110000111100001111000011110000111100001111;
    REQUIRE(gtl::hamming<64>(data_lhs, data_rhs) == 0);

    lhs = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs = 0b1111000011110000111100001111000011110000111100001111000011110000;
    REQUIRE(gtl::hamming<64>(data_lhs, data_rhs) == 0);

    lhs = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs = 0b1111111111111111111111111111111111111111111111111111111111111111;
    REQUIRE(gtl::hamming<64>(data_lhs, data_rhs) == 0);

    lhs = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs = 0b0000000000000000000000000000000000000000000000000000000000000000;
    REQUIRE(gtl::hamming<64>(data_lhs, data_rhs) == 64);

    lhs = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs = 0b1111111111111111111111111111111111111111111111111111111111111111;
    REQUIRE(gtl::hamming<64>(data_lhs, data_rhs) == 64);

    lhs = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs = 0b1111000011110000111100001111000011110000111100001111000011110000;
    REQUIRE(gtl::hamming<64>(data_lhs, data_rhs) == 64);

    lhs = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs = 0b0000111100001111000011110000111100001111000011110000111100001111;
    REQUIRE(gtl::hamming<64>(data_lhs, data_rhs) == 64);

    lhs = 0b0000000000000000000000000000000000000000000000000000000000000001;
    rhs = 0b0000000000000000000000000000000000000000000000000000000000000000;
    while (lhs != 0) {
        REQUIRE(gtl::hamming<64>(data_lhs, data_rhs) == 1);
        lhs <<= 1;
    }

    lhs = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs = 0b0000000000000000000000000000000000000000000000000000000000000001;
    while (rhs != 0) {
        REQUIRE(gtl::hamming<64>(data_lhs, data_rhs) == 1);
        rhs <<= 1;
    }

    lhs = 0b0000000000000000000000000000000000000000000000000000000000000001;
    rhs = 0b0000000000000000000000000000000000000000000000000000000000000001;
    while (lhs != 0) {
        REQUIRE(gtl::hamming<64>(data_lhs, data_rhs) == 0);
        lhs <<= 1;
        rhs <<= 1;
    }
}

TEST(hamming, function, size_128) {
    unsigned long long int lhs[2];
    unsigned long long int rhs[2];
    unsigned char* data_lhs = reinterpret_cast<unsigned char*>(&lhs[0]);
    unsigned char* data_rhs = reinterpret_cast<unsigned char*>(&rhs[0]);

    lhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    REQUIRE(gtl::hamming<128>(data_lhs, data_rhs) == 0);

    lhs[0] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[1] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[0] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[1] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    REQUIRE(gtl::hamming<128>(data_lhs, data_rhs) == 0);

    lhs[0] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[1] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[0] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[1] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    REQUIRE(gtl::hamming<128>(data_lhs, data_rhs) == 0);

    lhs[0] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[1] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[0] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[1] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    REQUIRE(gtl::hamming<128>(data_lhs, data_rhs) == 0);

    lhs[0] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[1] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    REQUIRE(gtl::hamming<128>(data_lhs, data_rhs) == 128);

    lhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[0] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[1] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    REQUIRE(gtl::hamming<128>(data_lhs, data_rhs) == 128);

    lhs[0] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[1] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[0] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[1] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    REQUIRE(gtl::hamming<128>(data_lhs, data_rhs) == 128);

    lhs[0] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[1] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[0] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[1] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    REQUIRE(gtl::hamming<128>(data_lhs, data_rhs) == 128);

    lhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000001;
    rhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    while ((lhs[0] != 0) || (lhs[1] != 0)) {
        REQUIRE(gtl::hamming<128>(data_lhs, data_rhs) == 1);
        lhs[1] <<= 1;
        if ((lhs[0] == 0) && (lhs[1] == 0)) {
            lhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000001;
        }
        else {
            lhs[0] <<= 1;
        }
    }

    lhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000001;
    while ((rhs[0] != 0) || (rhs[1] != 0)) {
        REQUIRE(gtl::hamming<128>(data_lhs, data_rhs) == 1);
        rhs[1] <<= 1;
        if ((rhs[0] == 0) && (rhs[1] == 0)) {
            rhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000001;
        }
        else {
            rhs[0] <<= 1;
        }
    }

    lhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000001;
    rhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000001;
    while ((lhs[0] != 0) || (lhs[1] != 0)) {
        REQUIRE(gtl::hamming<128>(data_lhs, data_rhs) == 0);
        lhs[1] <<= 1;
        if ((lhs[0] == 0) && (lhs[1] == 0)) {
            lhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000001;
        }
        else {
            lhs[0] <<= 1;
        }
        rhs[1] <<= 1;
        if ((rhs[0] == 0) && (rhs[1] == 0)) {
            rhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000001;
        }
        else {
            rhs[0] <<= 1;
        }
    }
}

TEST(hamming, function, size_256) {
    unsigned long long int lhs[4];
    unsigned long long int rhs[4];
    unsigned char* data_lhs = reinterpret_cast<unsigned char*>(&lhs[0]);
    unsigned char* data_rhs = reinterpret_cast<unsigned char*>(&rhs[0]);

    lhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[3] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[3] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    REQUIRE(gtl::hamming<256>(data_lhs, data_rhs) == 0);

    lhs[0] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[1] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[2] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[3] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[0] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[1] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[2] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[3] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    REQUIRE(gtl::hamming<256>(data_lhs, data_rhs) == 0);

    lhs[0] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[1] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[2] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[3] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[0] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[1] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[2] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[3] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    REQUIRE(gtl::hamming<256>(data_lhs, data_rhs) == 0);

    lhs[0] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[1] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[2] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[3] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[0] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[1] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[2] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[3] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    REQUIRE(gtl::hamming<256>(data_lhs, data_rhs) == 0);

    lhs[0] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[1] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[2] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[3] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[3] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    REQUIRE(gtl::hamming<256>(data_lhs, data_rhs) == 256);

    lhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[3] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[0] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[1] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[2] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[3] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    REQUIRE(gtl::hamming<256>(data_lhs, data_rhs) == 256);

    lhs[0] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[1] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[2] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[3] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[0] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[1] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[2] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[3] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    REQUIRE(gtl::hamming<256>(data_lhs, data_rhs) == 256);

    lhs[0] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[1] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[2] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[3] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[0] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[1] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[2] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[3] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    REQUIRE(gtl::hamming<256>(data_lhs, data_rhs) == 256);

    lhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[3] = 0b0000000000000000000000000000000000000000000000000000000000000001;
    rhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[3] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    while ((lhs[0] != 0) || (lhs[1] != 0) || (lhs[2] != 0) || (lhs[3] != 0)) {
        REQUIRE(gtl::hamming<256>(data_lhs, data_rhs) == 1);
        lhs[3] <<= 1;
        if ((lhs[0] == 0) && (lhs[1] == 0) && (lhs[2] == 0) && (lhs[3] == 0)) {
            lhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000001;
        }
        else {
            lhs[2] <<= 1;
        }
        if ((lhs[0] == 0) && (lhs[1] == 0) && (lhs[2] == 0) && (lhs[3] == 0)) {
            lhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000001;
        }
        else {
            lhs[1] <<= 1;
        }
        if ((lhs[0] == 0) && (lhs[1] == 0) && (lhs[2] == 0) && (lhs[3] == 0)) {
            lhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000001;
        }
        else {
            lhs[0] <<= 1;
        }
    }

    lhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[3] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[3] = 0b0000000000000000000000000000000000000000000000000000000000000001;
    while ((rhs[0] != 0) || (rhs[1] != 0) || (rhs[2] != 0) || (rhs[3] != 0)) {
        REQUIRE(gtl::hamming<256>(data_lhs, data_rhs) == 1);
        rhs[3] <<= 1;
        if ((rhs[0] == 0) && (rhs[1] == 0) && (rhs[2] == 0) && (rhs[3] == 0)) {
            rhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000001;
        }
        else {
            rhs[2] <<= 1;
        }
        if ((rhs[0] == 0) && (rhs[1] == 0) && (rhs[2] == 0) && (rhs[3] == 0)) {
            rhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000001;
        }
        else {
            rhs[1] <<= 1;
        }
        if ((rhs[0] == 0) && (rhs[1] == 0) && (rhs[2] == 0) && (rhs[3] == 0)) {
            rhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000001;
        }
        else {
            rhs[0] <<= 1;
        }
    }

    lhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[3] = 0b0000000000000000000000000000000000000000000000000000000000000001;
    rhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[3] = 0b0000000000000000000000000000000000000000000000000000000000000001;
    while ((lhs[0] != 0) || (lhs[1] != 0) || (lhs[2] != 0) || (lhs[3] != 0)) {
        REQUIRE(gtl::hamming<256>(data_lhs, data_rhs) == 0);
        lhs[3] <<= 1;
        if ((lhs[0] == 0) && (lhs[1] == 0) && (lhs[2] == 0) && (lhs[3] == 0)) {
            lhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000001;
        }
        else {
            lhs[2] <<= 1;
        }
        if ((lhs[0] == 0) && (lhs[1] == 0) && (lhs[2] == 0) && (lhs[3] == 0)) {
            lhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000001;
        }
        else {
            lhs[1] <<= 1;
        }
        if ((lhs[0] == 0) && (lhs[1] == 0) && (lhs[2] == 0) && (lhs[3] == 0)) {
            lhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000001;
        }
        else {
            lhs[0] <<= 1;
        }
        rhs[3] <<= 1;
        if ((rhs[0] == 0) && (rhs[1] == 0) && (rhs[2] == 0) && (rhs[3] == 0)) {
            rhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000001;
        }
        else {
            rhs[2] <<= 1;
        }
        if ((rhs[0] == 0) && (rhs[1] == 0) && (rhs[2] == 0) && (rhs[3] == 0)) {
            rhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000001;
        }
        else {
            rhs[1] <<= 1;
        }
        if ((rhs[0] == 0) && (rhs[1] == 0) && (rhs[2] == 0) && (rhs[3] == 0)) {
            rhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000001;
        }
        else {
            rhs[0] <<= 1;
        }
    }
}

TEST(hamming, function, size_512) {
    unsigned long long int lhs[8];
    unsigned long long int rhs[8];
    unsigned char* data_lhs = reinterpret_cast<unsigned char*>(&lhs[0]);
    unsigned char* data_rhs = reinterpret_cast<unsigned char*>(&rhs[0]);

    lhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[3] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[4] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[5] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[6] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[7] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[3] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[4] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[5] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[6] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[7] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    REQUIRE(gtl::hamming<512>(data_lhs, data_rhs) == 0);

    lhs[0] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[1] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[2] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[3] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[4] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[5] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[6] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[7] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[0] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[1] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[2] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[3] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[4] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[5] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[6] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[7] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    REQUIRE(gtl::hamming<512>(data_lhs, data_rhs) == 0);

    lhs[0] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[1] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[2] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[3] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[4] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[5] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[6] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[7] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[0] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[1] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[2] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[3] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[4] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[5] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[6] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[7] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    REQUIRE(gtl::hamming<512>(data_lhs, data_rhs) == 0);

    lhs[0] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[1] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[2] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[3] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[4] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[5] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[6] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[7] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[0] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[1] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[2] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[3] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[4] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[5] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[6] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[7] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    REQUIRE(gtl::hamming<512>(data_lhs, data_rhs) == 0);

    lhs[0] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[1] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[2] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[3] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[4] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[5] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[6] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    lhs[7] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[3] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[4] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[5] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[6] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[7] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    REQUIRE(gtl::hamming<512>(data_lhs, data_rhs) == 512);

    lhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[3] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[4] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[5] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[6] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[7] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[0] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[1] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[2] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[3] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[4] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[5] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[6] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    rhs[7] = 0b1111111111111111111111111111111111111111111111111111111111111111;
    REQUIRE(gtl::hamming<512>(data_lhs, data_rhs) == 512);

    lhs[0] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[1] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[2] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[3] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[4] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[5] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[6] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    lhs[7] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[0] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[1] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[2] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[3] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[4] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[5] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[6] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[7] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    REQUIRE(gtl::hamming<512>(data_lhs, data_rhs) == 512);

    lhs[0] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[1] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[2] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[3] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[4] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[5] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[6] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    lhs[7] = 0b1111000011110000111100001111000011110000111100001111000011110000;
    rhs[0] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[1] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[2] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[3] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[4] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[5] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[6] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    rhs[7] = 0b0000111100001111000011110000111100001111000011110000111100001111;
    REQUIRE(gtl::hamming<512>(data_lhs, data_rhs) == 512);

    lhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[3] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[4] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[5] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[6] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[7] = 0b0000000000000000000000000000000000000000000000000000000000000001;
    rhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[3] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[4] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[5] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[6] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[7] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    while ((lhs[0] != 0) || (lhs[1] != 0) || (lhs[2] != 0) || (lhs[3] != 0) || (lhs[4] != 0) || (lhs[5] != 0) || (lhs[6] != 0) || (lhs[7] != 0)) {
        REQUIRE(gtl::hamming<512>(data_lhs, data_rhs) == 1);
        lhs[7] <<= 1;
        for (int i = 6; i >= 0; --i) {
            if ((lhs[0] == 0) && (lhs[1] == 0) && (lhs[2] == 0) && (lhs[3] == 0) && (lhs[4] == 0) && (lhs[5] == 0) && (lhs[6] == 0) && (lhs[7] == 0)) {
                lhs[i] = 0b0000000000000000000000000000000000000000000000000000000000000001;
                break;
            }
            else {
                lhs[i] <<= 1;
            }
        }
    }

    lhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[3] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[4] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[5] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[6] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[7] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[3] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[4] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[5] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[6] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[7] = 0b0000000000000000000000000000000000000000000000000000000000000001;
    while ((rhs[0] != 0) || (rhs[1] != 0) || (rhs[2] != 0) || (rhs[3] != 0) || (rhs[4] != 0) || (rhs[5] != 0) || (rhs[6] != 0) || (rhs[7] != 0)) {
        REQUIRE(gtl::hamming<512>(data_lhs, data_rhs) == 1);
        rhs[7] <<= 1;
        for (int i = 6; i >= 0; --i) {
            if ((rhs[0] == 0) && (rhs[1] == 0) && (rhs[2] == 0) && (rhs[3] == 0) && (rhs[4] == 0) && (rhs[5] == 0) && (rhs[6] == 0) && (rhs[7] == 0)) {
                rhs[i] = 0b0000000000000000000000000000000000000000000000000000000000000001;
                break;
            }
            else {
                rhs[i] <<= 1;
            }
        }
    }

    lhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[3] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[4] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[5] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[6] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    lhs[7] = 0b0000000000000000000000000000000000000000000000000000000000000001;
    rhs[0] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[1] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[2] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[3] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[4] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[5] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[6] = 0b0000000000000000000000000000000000000000000000000000000000000000;
    rhs[7] = 0b0000000000000000000000000000000000000000000000000000000000000001;
    while ((lhs[0] != 0) || (lhs[1] != 0) || (lhs[2] != 0) || (lhs[3] != 0) || (lhs[4] != 0) || (lhs[5] != 0) || (lhs[6] != 0) || (lhs[7] != 0)) {
        REQUIRE(gtl::hamming<512>(data_lhs, data_rhs) == 0);
        lhs[7] <<= 1;
        for (int i = 6; i >= 0; --i) {
            if ((lhs[0] == 0) && (lhs[1] == 0) && (lhs[2] == 0) && (lhs[3] == 0) && (lhs[4] == 0) && (lhs[5] == 0) && (lhs[6] == 0) && (lhs[7] == 0)) {
                lhs[i] = 0b0000000000000000000000000000000000000000000000000000000000000001;
                break;
            }
            else {
                lhs[i] <<= 1;
            }
        }
        rhs[7] <<= 1;
        for (int i = 6; i >= 0; --i) {
            if ((rhs[0] == 0) && (rhs[1] == 0) && (rhs[2] == 0) && (rhs[3] == 0) && (rhs[4] == 0) && (rhs[5] == 0) && (rhs[6] == 0) && (rhs[7] == 0)) {
                rhs[i] = 0b0000000000000000000000000000000000000000000000000000000000000001;
                break;
            }
            else {
                rhs[i] <<= 1;
            }
        }
    }
}

