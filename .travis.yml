# Travis CI script.
# Derived from boostorg/hana/.travis.yml

# Repository language to compile.
language: cpp

# Sudo is not required.
sudo: false

# Linux distributions: xenial, trusty, precise

matrix:
  include:
    ############################################################################
    # Linux trusty with clang
    ############################################################################
    
    # Clang 3.5
    #- os: linux
    #  dist: trusty
    #  env:
    #  - OS=trusty
    #  - COMPILER=clang++-3.5
    #  addons: { apt: { packages: ["clang-3.5"], sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-precise-3.5"] } }
    
    # Clang 3.6
    #- os: linux
    #  dist: trusty
    #  env:
    #  - OS=trusty
    #  - COMPILER=clang++-3.6
    #  addons: { apt: { packages: ["clang-3.6"], sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-precise-3.6"] } }
    
    # Clang 3.7
    #- os: linux
    #  dist: trusty
    #  env:
    #  - OS=trusty
    #  - COMPILER=clang++-3.7
    #  addons: { apt: { packages: ["clang-3.7"], sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-precise-3.7"] } }
    
    # Clang 3.8
    #- os: linux
    #  dist: trusty
    #  env:
    #  - OS=trusty
    #  - COMPILER=clang++-3.8
    #  addons: { apt: { packages: ["clang-3.8"], sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-precise-3.8"] } }
    
    # Clang 3.9
    #- os: linux
    #  dist: trusty
    #  env:
    #  - OS=trusty
    #  - COMPILER=clang++-3.9
    #  addons: { apt: { packages: ["clang-3.9"], sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-trusty-3.9"] } }
    
    # Clang 4.0
    #- os: linux
    #  dist: trusty
    #  env:
    #  - OS=trusty
    #  - COMPILER=clang++-4.0
    #  addons: { apt: { packages: ["clang-4.0"], sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-trusty-4.0"] } }
    
    # Clang 5.0
    #- os: linux
    #  dist: trusty
    #  env:
    #  - OS=trusty
    #  - COMPILER=clang++-5.0
    #  addons: { apt: { packages: ["clang-5.0"], sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-trusty-5.0"] } }
    
    # Clang 6.0
    - os: linux
      dist: trusty
      env:
      - OS=trusty
      - COMPILER=clang++-6.0
      addons: { apt: { packages: ["clang-6.0"], sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-trusty-6.0"] } }
    
    ############################################################################
    # Linux trusty with gcc
    ############################################################################
    
    # GCC 6
    #- os: linux
    #  dist: trusty
    #  env:
    #  - OS=trusty
    #  - COMPILER=g++-6
    #  addons: { apt: { packages: ["g++-6"], sources: ["ubuntu-toolchain-r-test"] } }
    
    # GCC 7
    - os: linux
      dist: trusty
      env:
      - OS=trusty
      - COMPILER=g++-7
      addons: { apt: { packages: ["g++-7"], sources: ["ubuntu-toolchain-r-test"] } }
    
    ############################################################################
    # Linux xenial with clang
    ############################################################################
    
    # Clang 6.0
    #- os: linux
    #  dist: xenial
    #  env:
    #  - OS=xenial
    #  - COMPILER=clang++-6.0
    #  addons: { apt: { packages: ["clang-6.0"], sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-xenial-6.0"] } }
    
    ############################################################################
    # Linux xenial with gcc
    ############################################################################
    
    # GCC 6
    #- os: linux
    #  dist: xenial
    #  env:
    #  - OS=xenial
    #  - COMPILER=g++-6
    #  addons: { apt: { packages: ["g++-6"], sources: ["ubuntu-toolchain-r-test"] } }
    
    # GCC 7
    - os: linux
      dist: xenial
      env:
      - OS=xenial
      - COMPILER=g++-7
      addons: { apt: { packages: ["g++-7"], sources: ["ubuntu-toolchain-r-test"] } }
    
    ############################################################################
    # Linux bionic with clang
    ############################################################################
    
    # Clang 6.0
    #- os: linux
    #  dist: bionic
    #  env:
    #  - OS=bionic
    #  - COMPILER=clang++-6.0
    #  addons: { apt: { packages: ["clang-6.0"], sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-bionic-6.0"] } }
    
    ############################################################################
    # Linux bionic with gcc
    ############################################################################
    
    # GCC 6
    #- os: linux
    #  dist: bionic
    #  env:
    #  - OS=bionic
    #  - COMPILER=g++-6
    #  addons: { apt: { packages: ["g++-6"], sources: ["ubuntu-toolchain-r-test"] } }
    
    # GCC 7
    - os: linux
      dist: bionic
      env:
      - OS=bionic
      - COMPILER=g++-7
      addons: { apt: { packages: ["g++-7"], sources: ["ubuntu-toolchain-r-test"] } }
    
    ############################################################################
    # Macintosh osx with clang
    ############################################################################
    
    # Xcode 6.4
    #- os: osx
    #  osx_image: xcode6.4
    #  env:
    #  - OS=macOS-10.10
    #  - COMPILER=clang++
    
    # Xcode 7.3
    #- os: osx
    #  osx_image: xcode7.3
    #  env:
    #  - OS=macOS-10.11
    #  - COMPILER=clang++
    
    # Xcode 8.0
    #- os: osx
    #  osx_image: xcode8
    #  env:
    #  - OS=macOS-10.11
    #  - COMPILER=clang++
    
    # Xcode 8.3
    #- os: osx
    #  osx_image: xcode8.3
    #  env:
    #  - OS=macOS-10.12
    #  - COMPILER=clang++
    
    # Xcode 9.0
    #- os: osx
    #  osx_image: xcode9
    #  env:
    #  - OS=macOS-10.12
    #  - COMPILER=clang++
    
    # Xcode 9.1
    #- os: osx
    #  osx_image: xcode9.1
    #  env:
    #  - OS=macOS-10.12
    #  - COMPILER=clang++
    
    # Xcode 9.2
    #- os: osx
    #  osx_image: xcode9.2
    #  env:
    #  - OS=macOS-10.12
    #  - COMPILER=clang++
    
    # Xcode 9.3
    #- os: osx
    #  osx_image: xcode9.3
    #  env:
    #  - OS=macOS-10.13
    #  - COMPILER=clang++
    
    # Xcode 9.4
    #- os: osx
    #  osx_image: xcode9.4
    #  env:
    #  - OS=macOS-10.13
    #  - COMPILER=clang++
    
    # Xcode 10.0
    #- os: osx
    #  osx_image: xcode10
    #  env:
    #  - OS=macOS-10.13
    #  - COMPILER=clang++
    
    # Xcode 10.1
    #- os: osx
    #  osx_image: xcode10.1
    #  env:
    #  - OS=macOS-10.13
    #  - COMPILER=clang++
    
    # Xcode 10.2.1
    #- os: osx
    #  osx_image: xcode10.2
    #  env:
    #  - OS=macOS-10.14
    #  - COMPILER=clang++
    
    # Xcode 10.3
    #- os: osx
    #  osx_image: xcode10.3
    #  env:
    #  - OS=macOS-10.14.4
    #  - COMPILER=clang++
    
    # Xcode 11.0
    #- os: osx
    #  osx_image: xcode11
    #  env:
    #  - OS=macOS-10.14
    #  - COMPILER=clang++
    
    # Xcode 11.1
    #- os: osx
    #  osx_image: xcode11.1
    #  env:
    #  - OS=macOS-10.14
    #  - COMPILER=clang++
    
    # Xcode 11.2
    - os: osx
      osx_image: xcode11.2
      env:
      - OS=macOS-10.14
      - COMPILER=clang++
      
    ############################################################################
    # Windows server with Visual Studio 2017
    ############################################################################
    
    - os: windows
      env:
      - OS=win-server-1803
      - COMPILER=visual-studio-2017
    
before_install:
  - echo "Running before_install..." 
  
install:
  - echo "Running install..." 
  
  ############################################################################
  # All the dependencies are installed in ${HOME}/deps/.
  ############################################################################
  - DEPS_DIR="${HOME}/deps"
  - mkdir -p ${DEPS_DIR}
  - pushd ${DEPS_DIR}
  
  ############################################################################
  # Override CXX set by Travis.
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi
    elif [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      if [[ "${COMPILER}" != "" ]]; then echo "Overriding compiler disabled."; fi
    elif [[ "${TRAVIS_OS_NAME}" == "windows" ]]; then
      if [[ "${COMPILER}" != "" ]]; then echo "Overriding compiler disabled."; fi
    fi
  - ${CXX} --version

  ############################################################################
  # Install a recent CMake.
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v3.10/cmake-3.10.0-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    elif [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew install cmake || brew upgrade cmake
    elif [[ "${TRAVIS_OS_NAME}" == "windows" ]]; then
      CMAKE_URL="https://cmake.org/files/v3.10/cmake-3.10.0-win64-x64.zip"
      CMAKE_FILE=`mktemp`
      mkdir cmake && travis_retry wget --no-check-certificate --quiet - ${CMAKE_URL} -O ${CMAKE_FILE}
      unzip -q -d cmake ${CMAKE_FILE} && f=("cmake"/*) && mv "cmake"/*/* "cmake" && rmdir "${f[@]}"
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    fi
  - cmake --version

  ############################################################################
  # Install libc++ and libc++abi if needed.
  ############################################################################
  - |
    if [[ "${CXX%%+*}" == "clang" ]]; then
      if   [[ "${CXX}" == "clang++-3.5" ]]; then LLVM_VERSION="3.5.2";
      elif [[ "${CXX}" == "clang++-3.6" ]]; then LLVM_VERSION="3.6.2";
      elif [[ "${CXX}" == "clang++-3.7" ]]; then LLVM_VERSION="3.7.1";
      elif [[ "${CXX}" == "clang++-3.8" ]]; then LLVM_VERSION="3.8.1";
      elif [[ "${CXX}" == "clang++-3.9" ]]; then LLVM_VERSION="3.9.1";
      elif [[ "${CXX}" == "clang++-4.0" ]]; then LLVM_VERSION="4.0.1";
      elif [[ "${CXX}" == "clang++-5.0" ]]; then LLVM_VERSION="5.0.1";
      elif [[ "${CXX}" == "clang++-6.0" ]]; then LLVM_VERSION="6.0.1";
      fi
      LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
      LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
      LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
      mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
      travis_retry wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm || exit 1
      travis_retry wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxx || exit 1
      travis_retry wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxxabi || exit 1
      (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_DIR}/llvm/install) || exit 1
      (cd llvm/build/projects/libcxx && make install -j2) || exit 1
      (cd llvm/build/projects/libcxxabi && make install -j2) || exit 1
      export CXXFLAGS="-isystem ${DEPS_DIR}/llvm/install/include/c++/v1"
      export LDFLAGS="-L ${DEPS_DIR}/llvm/install/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DEPS_DIR}/llvm/install/lib"
    fi

  ############################################################################
  # Return home.
  ############################################################################
  - popd

before_script:
  - echo "Running before_script..."
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      sudo apt-get update -qq
      sudo apt-get install -qq valgrind
    fi

script:
  - echo "Running script..." 
  - bash compile.sh Debug
  - bash compile.sh Release
  - bash compile.sh RelWithDebInfo
  - bash compile.sh MinSizeRel

after_success:
  - echo "Running after_success..."

notifications:
  email: false
