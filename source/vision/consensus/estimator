/*
Copyright (C) 2018-2022 Geoffrey Daniels. http://gpdaniels.com/

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License only.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#pragma once
#ifndef GTL_VISION_CONSENSUS_ESTIMATOR_HPP
#define GTL_VISION_CONSENSUS_ESTIMATOR_HPP

// Summary: Interface of a consensus model estimator. [wip]

namespace {
    using size_t = decltype(sizeof(1));
}

namespace gtl {
    template <
        typename template_data_type,
        size_t template_required_sample_size,
        typename template_model_type,
        size_t template_potential_models_size
    >
    class estimator {
    public:
        using data_type = template_data_type;
        constexpr static const size_t required_sample_size = template_required_sample_size;
        using model_type = template_model_type;
        constexpr static const size_t potential_models_size = template_potential_models_size;

    protected:
        virtual ~estimator() = default;
        estimator() = default;

    public:
        virtual size_t generate_models(const data_type* const __restrict data, size_t data_size, model_type* const __restrict models) = 0;

        virtual void compute_residuals(const data_type* const __restrict data, size_t data_size, const model_type& model, float* const __restrict residuals) = 0;

        virtual void refine_model(const data_type* const __restrict data, size_t data_size, model_type& model) {
            static_cast<void>(data);
            static_cast<void>(data_size);
            static_cast<void>(model);
        }
    };
}

#endif // GTL_VISION_CONSENSUS_ESTIMATOR_HPP
