/*
Copyright (C) 2018-2024 Geoffrey Daniels. https://gpdaniels.com/

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License only.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#pragma once
#ifndef GTL_UTILITY_SIZEOF_BITFIELD_HPP
#define GTL_UTILITY_SIZEOF_BITFIELD_HPP

// Summary: Macro to get the size in bits of a bitfield. [wip]

namespace gtl {
    namespace sizeof_bitset {
#if defined(__clang__)
#define GTL_SIZEOF_BITFIELD(structure, member)                                  \
    []() constexpr->unsigned int {                                              \
        structure empty{};                                                      \
        empty.member = static_cast<decltype(structure{}.member)>(0);            \
        _Pragma("clang diagnostic push");                                       \
        _Pragma("clang diagnostic ignored \"-Wbitfield-constant-conversion\""); \
        structure full{};                                                       \
        full.member = static_cast<decltype(structure{}.member)>(~0);            \
        _Pragma("clang diagnostic pop");                                        \
        unsigned int size = 0;                                                  \
        while (empty.member != full.member) {                                   \
            empty.member = static_cast<decltype(structure{}.member)>(           \
                (static_cast<unsigned long long int>(empty.member) << 1) | 1);  \
            ++size;                                                             \
        }                                                                       \
        return size;                                                            \
    }                                                                           \
    ()
#elif (defined(__GNUC__) || defined(__GNUG__)) && (!defined(__clang__) && (!defined(__INTEL_COMPILER)))
#define GTL_SIZEOF_BITFIELD(structure, member)                                 \
    []() constexpr->unsigned int {                                             \
        structure empty{};                                                     \
        empty.member = static_cast<decltype(structure{}.member)>(0);           \
        _Pragma("GCC diagnostic push");                                        \
        _Pragma("GCC diagnostic ignored \"-Woverflow\"");                      \
        structure full{};                                                      \
        full.member = static_cast<decltype(structure{}.member)>(~0);           \
        _Pragma("GCC diagnostic pop");                                         \
        unsigned int size = 0;                                                 \
        while (empty.member != full.member) {                                  \
            empty.member = static_cast<decltype(structure{}.member)>(          \
                (static_cast<unsigned long long int>(empty.member) << 1) | 1); \
            ++size;                                                            \
        }                                                                      \
        return size;                                                           \
    }                                                                          \
    ()
#elif defined(_MSC_VER)
#define GTL_SIZEOF_BITFIELD(structure, member)                                 \
    []() constexpr->unsigned int {                                             \
        structure empty{};                                                     \
        empty.member = static_cast<decltype(structure{}.member)>(0);           \
        _Pragma("warning(push)");                                              \
        _Pragma("warning(disable:4463)");                                      \
        structure full{};                                                      \
        full.member = static_cast<decltype(structure{}.member)>(~0);           \
        _Pragma("warning(pop)");                                               \
        unsigned int size = 0;                                                 \
        while (empty.member != full.member) {                                  \
            empty.member = static_cast<decltype(structure{}.member)>(          \
                (static_cast<unsigned long long int>(empty.member) << 1) | 1); \
            ++size;                                                            \
        }                                                                      \
        return size;                                                           \
    }                                                                          \
    ()
#else
#define GTL_SIZEOF_BITFIELD(structure, member)                                 \
    []() constexpr->unsigned int {                                             \
        structure empty{};                                                     \
        empty.member = static_cast<decltype(structure{}.member)>(0);           \
        structure full{};                                                      \
        full.member = static_cast<decltype(structure{}.member)>(~0);           \
        unsigned int size = 0;                                                 \
        while (empty.member != full.member) {                                  \
            empty.member = static_cast<decltype(structure{}.member)>(          \
                (static_cast<unsigned long long int>(empty.member) << 1) | 1); \
            ++size;                                                            \
        }                                                                      \
        return size;                                                           \
    }                                                                          \
    ()
#endif
    }
}

#endif // GTL_UTILITY_SIZEOF_BITFIELD_HPP
