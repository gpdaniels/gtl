/*
Copyright (C) 2018-2022 Geoffrey Daniels. http://gpdaniels.com/

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License only.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#pragma once
#ifndef GTL_UTILITY_SIZEOF_BITFIELD_HPP
#define GTL_UTILITY_SIZEOF_BITFIELD_HPP

// Summary: Macro to get the size in bits of a bitfield. [wip]

namespace gtl {
namespace sizeof_bitset {
    #define GTL_SIZEOF_BITFIELD(structure, member)                                  \
        []() constexpr -> unsigned int {                                            \
            structure empty{};                                                      \
            empty.member = static_cast<decltype(structure{}.member)>(0);            \
            _Pragma("GCC diagnostic push");                                         \
            _Pragma("GCC diagnostic ignored \"-Woverflow\"");                       \
            _Pragma("clang diagnostic push");                                       \
            _Pragma("clang diagnostic ignored \"-Wbitfield-constant-conversion\""); \
            structure full{};                                                       \
            full.member = static_cast<decltype(structure{}.member)>(~0);            \
            _Pragma("clang diagnostic pop");                                        \
            _Pragma("GCC diagnostic pop");                                          \
            unsigned int size = 0;                                                  \
            while (empty.member != full.member) {                                   \
                empty.member = static_cast<decltype(structure{}.member)>(           \
                    (static_cast<unsigned long long int>(empty.member) << 1) | 1    \
                );                                                                  \
                ++size;                                                             \
            }                                                                       \
            return size;                                                            \
        }()
}}

#endif // GTL_UTILITY_SIZEOF_BITFIELD_HPP
