/*
Copyright (C) 2018-2024 Geoffrey Daniels. https://gpdaniels.com/

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License only.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#pragma once
#ifndef GTL_VISION_API_HPP
#define GTL_VISION_API_HPP

// Summary: An API for a computer vision system that consumes sensor data to perform localisation and mapping. [wip]

// TODO: Evaluate if this pragma is needed.
#pragma pack(1)

#if defined(__cplusplus)
extern "C" {
#endif

#if defined(_MSC_VER)
#if defined(GTL_API_EXPORT)
#define GTL_API_VISIBILITY __declspec(dllexport)
#else
#define GTL_API_VISIBILITY __declspec(dllimport)
#endif

#define GTL_API_CALL __stdcall

#define GTL_API_STATIC_ASSERT(ASSERTION, MESSAGE) static_assert(ASSERTION, MESSAGE);
#else
#if defined(GTL_API_EXPORT)
#define GTL_API_VISIBILITY __attribute__((visibility("default")))
#else
#define GTL_API_VISIBILITY __attribute__((visibility("default")))
#endif

#define GTL_API_CALL

#if defined(__cplusplus)
#define GTL_API_STATIC_ASSERT(ASSERTION, MESSAGE) static_assert(ASSERTION, MESSAGE);
#else
#define GTL_API_STATIC_ASSERT(ASSERTION, MESSAGE) _Static_assert(ASSERTION, MESSAGE);
#endif
#endif

GTL_API_STATIC_ASSERT(sizeof(char) == 1, "For ABI compatibility the sizeof(char) must be 1 byte.")
GTL_API_STATIC_ASSERT(sizeof(short int) == 2, "For ABI compatibility the sizeof(short int) must be 2 bytes.")
GTL_API_STATIC_ASSERT(sizeof(int) == 4, "For ABI compatibility the sizeof(int) must be 4 bytes.")
GTL_API_STATIC_ASSERT(sizeof(long long int) == 8, "For ABI compatibility the sizeof(long long int) must be 8 bytes.")
GTL_API_STATIC_ASSERT(sizeof(float) == 4, "For ABI compatibility the sizeof(float) must be 4 bytes.")

typedef struct gtl_vision_system gtl_vision_system;

typedef enum gtl_vision_return_enum {
    gtl_vision_return_success = 0x00000000,
    gtl_vision_return_failure_insufficient_data_length = 0x00000001,
    gtl_vision_return_failure_invalid_system = 0x00000010,
    gtl_vision_return_failure_invalid_argument = 0x00000100,
    gtl_vision_return_failure_invalid_configuration = 0x00001000,
    gtl_vision_return_failure_invalid_rig_sensor = 0x00010000,
    gtl_vision_return_failure_invalid_sensor_data = 0x00100000,
    gtl_vision_return_invalid = 0xFFFFFFFF
} gtl_vision_return_enum;
GTL_API_STATIC_ASSERT(sizeof(gtl_vision_return_enum) == 4, "For ABI compatibility the sizeof(gtl_vision_return_enum) must be 4 bytes.")

GTL_API_VISIBILITY
inline const char*
    GTL_API_CALL
    gtl_vision_return_enum_to_string(
        gtl_vision_return_enum return_enum
    ) {
    switch (return_enum) {
        case gtl_vision_return_success:
            return "success";
        case gtl_vision_return_failure_insufficient_data_length:
            return "failure: insufficient data length";
        case gtl_vision_return_failure_invalid_system:
            return "failure: invalid system";
        case gtl_vision_return_failure_invalid_argument:
            return "failure: invalid argument";
        case gtl_vision_return_failure_invalid_configuration:
            return "failure: invalid configuration";
        case gtl_vision_return_failure_invalid_rig_sensor:
            return "failure: invalid rig sensor";
        case gtl_vision_return_failure_invalid_sensor_data:
            return "failure: invalid sensor_data";
        case gtl_vision_return_invalid:
            return "invalid";
    }
    return "unknown";
}

GTL_API_VISIBILITY
gtl_vision_return_enum
    GTL_API_CALL
    gtl_vision_create(
        gtl_vision_system** system
    );

GTL_API_VISIBILITY
gtl_vision_return_enum
    GTL_API_CALL
    gtl_vision_destroy(
        gtl_vision_system** system
    );

GTL_API_VISIBILITY
gtl_vision_return_enum
    GTL_API_CALL
    gtl_vision_get_timestamp(
        gtl_vision_system* system,
        long long int* timestamp
    );

GTL_API_VISIBILITY
gtl_vision_return_enum
    GTL_API_CALL
    gtl_vision_get_configuration(
        gtl_vision_system* system,
        char* configuration,
        int* length
    );

GTL_API_VISIBILITY
gtl_vision_return_enum
    GTL_API_CALL
    gtl_vision_set_configuration(
        gtl_vision_system* system,
        const char* configuration,
        int length
    );

typedef enum gtl_vision_sensor_emum {
    gtl_vision_sensor_empty = 0x00000000,
    gtl_vision_sensor_map_chunk = 0x00000001,
    gtl_vision_sensor_local_scale = 0x00000010,
    gtl_vision_sensor_local_linear = 0x00000020,
    gtl_vision_sensor_local_angular = 0x00000040,
    gtl_vision_sensor_remote_range = 0x00000100,
    gtl_vision_sensor_remote_bearing = 0x00000200,
    gtl_vision_sensor_remote_description = 0x00000400,
    gtl_vision_sensor_invalid = 0xFFFFFFFF
} gtl_vision_sensor_emum;
GTL_API_STATIC_ASSERT(sizeof(gtl_vision_sensor_emum) == 4, "For ABI compatibility the sizeof(gtl_vision_sensor_emum) must be 4 bytes.")

GTL_API_VISIBILITY
inline const char*
    GTL_API_CALL
    gtl_vision_sensor_emum_to_string(
        gtl_vision_sensor_emum sensor_emum
    ) {
    switch (sensor_emum) {
        case gtl_vision_sensor_empty:
            return "empty";
        case gtl_vision_sensor_map_chunk:
            return "map chunk";
        case gtl_vision_sensor_local_scale:
            return "local scale";
        case gtl_vision_sensor_local_linear:
            return "local linear";
        case gtl_vision_sensor_local_angular:
            return "local augular";
        case gtl_vision_sensor_remote_range:
            return "remote range";
        case gtl_vision_sensor_remote_bearing:
            return "remote bearing";
        case gtl_vision_sensor_remote_description:
            return "remote description";
        case gtl_vision_sensor_invalid:
            return "invalid";
    }
    return "unknown";
}

typedef struct gtl_vision_sensor_rig_struct {
    gtl_vision_sensor_emum type;
    int sensor_id;
    int parameters_length;
    void* parameters_data;
} gtl_vision_sensor_rig_struct;
GTL_API_STATIC_ASSERT(sizeof(gtl_vision_sensor_rig_struct) == 12 + sizeof(void*), "For ABI compatibility the sizeof(gtl_vision_sensor_rig_struct) must be 12+sizeof(void*) bytes.")

GTL_API_VISIBILITY
gtl_vision_return_enum
    GTL_API_CALL
    gtl_vision_set_sensor_rig(
        gtl_vision_system* system,
        const gtl_vision_sensor_rig_struct* rig,
        int length
    );

typedef struct gtl_vision_sensor_data_struct {
    long long int timestamp;
    int sensor_id;
    int measurment_length;
    void* measurment_data;
} gtl_vision_sensor_data_struct;
GTL_API_STATIC_ASSERT(sizeof(gtl_vision_sensor_data_struct) == 16 + sizeof(void*), "For ABI compatibility the sizeof(gtl_vision_sensor_data_struct) must be 16+sizeof(void*) bytes.")

GTL_API_VISIBILITY
gtl_vision_return_enum
    GTL_API_CALL
    gtl_vision_set_sensor_data(
        gtl_vision_system* system,
        const gtl_vision_sensor_data_struct* data,
        int length
    );

typedef struct gtl_vision_pose_struct {
    long long int timestamp;
    float pose[7];
    float covariance[7 * 7];
} gtl_vision_pose_struct;
GTL_API_STATIC_ASSERT(sizeof(gtl_vision_pose_struct) == 232, "For ABI compatibility the sizeof(gtl_vision_pose_struct) must be 232 bytes.")

GTL_API_VISIBILITY
gtl_vision_return_enum
    GTL_API_CALL
    gtl_vision_get_pose(
        gtl_vision_system* system,
        gtl_vision_pose_struct* pose
    );

GTL_API_VISIBILITY
gtl_vision_return_enum
    GTL_API_CALL
    gtl_vision_get_pose_at_timestamp(
        gtl_vision_system* system,
        gtl_vision_pose_struct* pose,
        long long int timestamp
    );

typedef struct gtl_vision_point_struct {
    float x, y, z;
    float confidence;
    float r, g, b;
    float a;
} gtl_vision_point_struct;
GTL_API_STATIC_ASSERT(sizeof(gtl_vision_point_struct) == 32, "For ABI compatibility the sizeof(gtl_vision_point_struct) must be 32 bytes.")

typedef struct gtl_vision_map_chunk_struct {
    long long int timestamp;
    float min_x, min_y, min_z;
    float max_x, max_y, max_z;
    int points_length;
    gtl_vision_point_struct* points;
} gtl_vision_map_chunk_struct;
GTL_API_STATIC_ASSERT(sizeof(gtl_vision_map_chunk_struct) == 36 + sizeof(void*), "For ABI compatibility the sizeof(gtl_vision_map_chunk_struct) must be 36+sizeof(void*) bytes.")

GTL_API_VISIBILITY
gtl_vision_return_enum
    GTL_API_CALL
    gtl_vision_get_map_chunk(
        gtl_vision_system* system,
        float x,
        float y,
        float z,
        gtl_vision_map_chunk_struct* chunk
    );

#undef GTL_API_VISIBILITY
#undef GTL_API_CALL
#undef GTL_API_STATIC_ASSERT

#if defined(__cplusplus)
}
#endif

// TODO: Evaluate if this pragma is needed.
#pragma pack()

#endif // GTL_VISION_API_HPP
