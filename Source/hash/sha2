/*
The MIT License
Copyright (c) 2019 Geoffrey Daniels. http://gpdaniels.com/
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE
*/

#pragma once
#ifndef GTL_SHA2_HPP
#define GTL_SHA2_HPP

namespace gtl {
    /// @brief  Different sizes available for the sha2 class.
    enum class sha2_size {
        bits_224,
        bits_256,
        bits_384,
        bits_512
    };

    /// @brief  The sha2 class computes and SHA2 hash of a sequence of data.
    /// @tparam size The size parameter allows for the selection of different hash lengths.
    template <sha2_size size>
    class sha2;

    /// @brief  SHA2 hash with a size of 224 bits.
    template <>
    class sha2<sha2_size::bits_224> {
    public:
        /// @brief  Handy variable for accessing the sha2 size.
        constexpr static const sha2_size type = sha2_size::bits_224;

        /// @brief  Internal size of each processed block of data in bytes.
        constexpr static const unsigned int block_size = 512 / 8;

        /// @brief  Size of the hash in bytes.
        constexpr static const unsigned int hash_size = 28;

    public:
        /// @brief  Simple type to hold the hash data.
        struct hash_type {
            unsigned int data[sha2::hash_size / sizeof(unsigned int)] = {
                0xC1059ED8, 0x367CD507, 0x3070DD17, 0xF70E5939,
                0xFFC00B31, 0x68581511, 0x64F98FA7
            };
            unsigned int additional_data = 0xBEFA4FA4;
        };

    private:
        /// @brief  Internal type used to construct blocks of data for processing.
        struct block_type {
            /// @brief  Total number of bytes that have been appended to the block.
            unsigned long long int length_bytes = 0;

            /// @brief  The data stored in the block.
            unsigned int data[sha2::block_size / sizeof(unsigned int)] = {};

            /// @brief Clear the data stored in the block.
            void clear() {
                this->length_bytes = 0;
                for (unsigned int index = 0; index < (sha2::block_size / sizeof(unsigned int)); ++index) {
                    this->data[index] = 0;
                }
            }

            /// @brief  Append a byte of data to the end of the block.
            /// @param  byte The byte of data to append.
            void append(const char byte) {
                this->data[this->length_bytes / sizeof(unsigned int)] |= static_cast<unsigned int>(static_cast<unsigned char>(byte)) << (((sizeof(unsigned int) - 1) - (this->length_bytes % sizeof(unsigned int))) * 8);
                ++this->length_bytes;
            }

            /// @brief  Check if the block is full.
            /// @return true if the block is full, false otherwise.
            bool is_full() const {
                return (this->length_bytes == sha2::block_size);
            }
        };

    private:
        /// @brief  The first 32-bits of the fractional parts of the cube roots of the first 64 primes.
        constexpr static const unsigned int constants[sha2::block_size] = {
            0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
            0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
            0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
            0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
            0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
            0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
            0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
            0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
        };

    private:
        /// @brief  The number of bytes of data that have been hashed.
        unsigned long long int hashed_length = 0;

        /// @brief  The current block of data being filled.
        block_type block;

        /// @brief  The current hash.
        hash_type hash;

    private:
        /// @brief  Rotate a 32 bit value right by a shift amount.
        /// @param  value The value to rotate.
        /// @param  shift The number of bits to rotate by.
        /// @return The value after it has been rotated right by shift bits.
        constexpr static unsigned int rotate_right(unsigned int value, unsigned int shift) {
            const unsigned int mask = (8 * sizeof(unsigned int) - 1);
            shift &= mask;
            return (value >> shift) | (value << ((-shift) & mask));
        }

        /// @brief  Perform the SHA2 hashing algorithm on a block of data.
        /// @param  initial_state The value of the hash before the addition of this block of data.
        /// @param  current_block The new block of data to add to the hash.
        /// @return The new hash after consuming the new block of data.
        constexpr static hash_type hash_block(const hash_type& initial_state, const block_type& current_block) {

            unsigned int A = initial_state.data[0];
            unsigned int B = initial_state.data[1];
            unsigned int C = initial_state.data[2];
            unsigned int D = initial_state.data[3];
            unsigned int E = initial_state.data[4];
            unsigned int F = initial_state.data[5];
            unsigned int G = initial_state.data[6];
            unsigned int H = initial_state.additional_data;

            // Fill the working block from the current.
            unsigned int working_block[sha2::block_size] = {};
            for (unsigned int index = 0; index < sha2::block_size / sizeof(unsigned int); ++index) {
                working_block[index] = current_block.data[index];
            }

            // Mix to fill the remainder of the working block.
            for (unsigned int index = sha2::block_size / sizeof(unsigned int); index < sha2::block_size; ++index) {
                const unsigned int S0 = rotate_right(working_block[index - 15], 7) ^ rotate_right(working_block[index - 15], 18) ^ (working_block[index - 15] >> 3);
                const unsigned int S1 = rotate_right(working_block[index - 2], 17) ^ rotate_right(working_block[index - 2], 19) ^ (working_block[index - 2] >> 10);
                working_block[index] = working_block[index - 16] + S0 + working_block[index - 7] + S1;
            }

            // Do the hash iterations.
            for (unsigned int iteration = 0; iteration < sha2::block_size; ++iteration) {
                const unsigned int S1 = rotate_right(E, 6) ^ rotate_right(E, 11) ^ rotate_right(E, 25);
                const unsigned int CH = (E & F) ^ ((~E) & G);
                const unsigned int TEMP1 = H + S1 + CH + sha2::constants[iteration] + working_block[iteration];
                const unsigned int S0 = rotate_right(A, 2) ^ rotate_right(A, 13) ^ rotate_right(A, 22);
                const unsigned int MAJ = (A & B) ^ (A & C) ^ (B & C);
                const unsigned int TEMP2 = S0 + MAJ;

                H = G;
                G = F;
                F = E;
                E = D + TEMP1;
                D = C;
                C = B;
                B = A;
                A = TEMP1 + TEMP2;
            }

            return {{
                    initial_state.data[0] + A,
                    initial_state.data[1] + B,
                    initial_state.data[2] + C,
                    initial_state.data[3] + D,
                    initial_state.data[4] + E,
                    initial_state.data[5] + F,
                    initial_state.data[6] + G
                },
                initial_state.additional_data + H
            };
        }

    public:
        /// @brief  Clear the state of the SHA2 hash class back to its initial values.
        void clear() {
            this->hashed_length = 0;
            this->block.clear();
            this->hash = {};
        }

        /// @brief  Add data that is processed by the hash function, this can be repeatedly called.
        /// @param  data A pointer to an array of bytes to process.
        /// @param  length The length of the data array.
        void insert(const char* data, unsigned long long int length) {

            // Read a block of the input data (512 bits).
            for (unsigned long long int index = 0; index < length; ++index) {
                // Load data into the block one byte at a time.
                this->block.append(*data++);

                // If the block is full, hash it.
                if (this->block.is_full()) {
                    this->hash = sha2::hash_block(this->hash, this->block);
                    this->block.clear();
                }
            }

            this->hashed_length += length;
        }

        /// @brief  Finish consuming any cached data and return the hash before clearing the class.
        /// @return The hash of all the inserted data.
        hash_type finalise() {

            // Pad the data with a single 0x80 on the end.
            this->block.append(static_cast<char>(0x80));

            // Check if there is enough space in the final chunk for the data length.
            if (this->block.length_bytes > (sha2::block_size - sizeof(unsigned long long int))) {
                this->hash = sha2::hash_block(this->hash, this->block);
                this->block.clear();
            }

            const unsigned long long int hashed_length_bits = this->hashed_length * 8;

            // Add the data length to the chunk.

            this->block.data[14] = (hashed_length_bits & 0xFFFFFFFF00000000ull) >> 32u;
            this->block.data[15] = (hashed_length_bits & 0x00000000FFFFFFFFull) >> 0u;

            // Hash the block.
            this->hash = sha2::hash_block(this->hash, this->block);

            // Get a copy of the hash so the class can be reset.
            hash_type temp_hash = this->hash;

            // Reset the class to a valid state.
            this->clear();

            // Return the hash
            return temp_hash;
        }

    public:
        /// @brief  Simple type to hold the string representation of the hash.
        struct hash_string_type {
            char hash[(sha2::hash_size * 2) + 1] = {};
        };

        /// @brief  Convert a hash into its string representation.
        /// @param  hash The hash to convert.
        /// @return The string representation of the hash, with null termination.
        constexpr static hash_string_type hash_to_string(const hash_type& hash) {
            hash_string_type output;
            constexpr const char* hex_characters = "0123456789ABCDEF";
            for (unsigned int index = 0u; index < (sha2::hash_size * 2); ++index) {
                output.hash[index] = hex_characters[(hash.data[index / (sizeof(unsigned int) * 2)] >> ((((sizeof(unsigned int) * 2) - 1) - (index % (sizeof(unsigned int) * 2))) * 4)) & 0xF];
            }
            output.hash[sha2::hash_size * 2] = 0;
            return output;
        }
    };

    /// @brief  SHA2 hash with a size of 256 bits.
    template <>
    class sha2<sha2_size::bits_256> {
    public:
        /// @brief  Handy variable for accessing the sha2 size.
        constexpr static const sha2_size type = sha2_size::bits_256;

        /// @brief  Internal size of each processed block of data in bytes.
        constexpr static const unsigned int block_size = 512 / 8;

        /// @brief  Size of the hash in bytes.
        constexpr static const unsigned int hash_size = 32;

    public:
        /// @brief  Simple type to hold the hash data.
        struct hash_type {
            unsigned int data[sha2::hash_size / sizeof(unsigned int)] = {
                0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,
                0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19
            };
        };

    private:
        /// @brief  Internal type used to construct blocks of data for processing.
        struct block_type {
            /// @brief  Total number of bytes that have been appended to the block.
            unsigned long long int length_bytes = 0;

            /// @brief  The data stored in the block.
            unsigned int data[sha2::block_size / sizeof(unsigned int)] = {};

            /// @brief Clear the data stored in the block.
            void clear() {
                this->length_bytes = 0;
                for (unsigned int index = 0; index < (sha2::block_size / sizeof(unsigned int)); ++index) {
                    this->data[index] = 0;
                }
            }

            /// @brief  Append a byte of data to the end of the block.
            /// @param  byte The byte of data to append.
            void append(const char byte) {
                this->data[this->length_bytes / sizeof(unsigned int)] |= static_cast<unsigned int>(static_cast<unsigned char>(byte)) << (((sizeof(unsigned int) - 1) - (this->length_bytes % sizeof(unsigned int))) * 8);
                ++this->length_bytes;
            }

            /// @brief  Check if the block is full.
            /// @return true if the block is full, false otherwise.
            bool is_full() const {
                return (this->length_bytes == sha2::block_size);
            }
        };

    private:
        /// @brief  The first 32-bits of the fractional parts of the cube roots of the first 64 primes.
        constexpr static const unsigned int constants[sha2::block_size] = {
            0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
            0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
            0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
            0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
            0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
            0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
            0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
            0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
        };

    private:
        /// @brief  The number of bytes of data that have been hashed.
        unsigned long long int hashed_length = 0;

        /// @brief  The current block of data being filled.
        block_type block;

        /// @brief  The current hash.
        hash_type hash;

    private:
        /// @brief  Rotate a 32 bit value right by a shift amount.
        /// @param  value The value to rotate.
        /// @param  shift The number of bits to rotate by.
        /// @return The value after it has been rotated right by shift bits.
        constexpr static unsigned int rotate_right(unsigned int value, unsigned int shift) {
            const unsigned int mask = (8 * sizeof(unsigned int) - 1);
            shift &= mask;
            return (value >> shift) | (value << ((-shift) & mask));
        }

        /// @brief  Perform the SHA2 hashing algorithm on a block of data.
        /// @param  initial_state The value of the hash before the addition of this block of data.
        /// @param  current_block The new block of data to add to the hash.
        /// @return The new hash after consuming the new block of data.
        constexpr static hash_type hash_block(const hash_type& initial_state, const block_type& current_block) {

            unsigned int A = initial_state.data[0];
            unsigned int B = initial_state.data[1];
            unsigned int C = initial_state.data[2];
            unsigned int D = initial_state.data[3];
            unsigned int E = initial_state.data[4];
            unsigned int F = initial_state.data[5];
            unsigned int G = initial_state.data[6];
            unsigned int H = initial_state.data[7];

            // Fill the working block from the current.
            unsigned int working_block[sha2::block_size] = {};
            for (unsigned int index = 0; index < sha2::block_size / sizeof(unsigned int); ++index) {
                working_block[index] = current_block.data[index];
            }

            // Mix to fill the remainder of the working block.
            for (unsigned int index = sha2::block_size / sizeof(unsigned int); index < sha2::block_size; ++index) {
                const unsigned int S0 = rotate_right(working_block[index - 15], 7) ^ rotate_right(working_block[index - 15], 18) ^ (working_block[index - 15] >> 3);
                const unsigned int S1 = rotate_right(working_block[index - 2], 17) ^ rotate_right(working_block[index - 2], 19) ^ (working_block[index - 2] >> 10);
                working_block[index] = working_block[index - 16] + S0 + working_block[index - 7] + S1;
            }

            // Do the hash iterations.
            for (unsigned int iteration = 0; iteration < sha2::block_size; ++iteration) {
                const unsigned int S1 = rotate_right(E, 6) ^ rotate_right(E, 11) ^ rotate_right(E, 25);
                const unsigned int CH = (E & F) ^ ((~E) & G);
                const unsigned int TEMP1 = H + S1 + CH + sha2::constants[iteration] + working_block[iteration];
                const unsigned int S0 = rotate_right(A, 2) ^ rotate_right(A, 13) ^ rotate_right(A, 22);
                const unsigned int MAJ = (A & B) ^ (A & C) ^ (B & C);
                const unsigned int TEMP2 = S0 + MAJ;

                H = G;
                G = F;
                F = E;
                E = D + TEMP1;
                D = C;
                C = B;
                B = A;
                A = TEMP1 + TEMP2;
            }

            return {{
                initial_state.data[0] + A,
                initial_state.data[1] + B,
                initial_state.data[2] + C,
                initial_state.data[3] + D,
                initial_state.data[4] + E,
                initial_state.data[5] + F,
                initial_state.data[6] + G,
                initial_state.data[7] + H
            }};
        }

    public:
        /// @brief  Clear the state of the SHA2 hash class back to its initial values.
        void clear() {
            this->hashed_length = 0;
            this->block.clear();
            this->hash = {};
        }

        /// @brief  Add data that is processed by the hash function, this can be repeatedly called.
        /// @param  data A pointer to an array of bytes to process.
        /// @param  length The length of the data array.
        void insert(const char* data, unsigned long long int length) {

            // Read a block of the input data (512 bits).
            for (unsigned long long int index = 0; index < length; ++index) {
                // Load data into the block one byte at a time.
                this->block.append(*data++);

                // If the block is full, hash it.
                if (this->block.is_full()) {
                    this->hash = sha2::hash_block(this->hash, this->block);
                    this->block.clear();
                }
            }

            this->hashed_length += length;
        }

        /// @brief  Finish consuming any cached data and return the hash before clearing the class.
        /// @return The hash of all the inserted data.
        hash_type finalise() {

            // Pad the data with a single 0x80 on the end.
            this->block.append(static_cast<char>(0x80));

            // Check if there is enough space in the final chunk for the data length.
            if (this->block.length_bytes > (sha2::block_size - sizeof(unsigned long long int))) {
                this->hash = sha2::hash_block(this->hash, this->block);
                this->block.clear();
            }

            const unsigned long long int hashed_length_bits = this->hashed_length * 8;

            // Add the data length to the chunk.

            this->block.data[14] = (hashed_length_bits & 0xFFFFFFFF00000000ull) >> 32u;
            this->block.data[15] = (hashed_length_bits & 0x00000000FFFFFFFFull) >> 0u;

            // Hash the block.
            this->hash = sha2::hash_block(this->hash, this->block);

            // Get a copy of the hash so the class can be reset.
            hash_type temp_hash = this->hash;

            // Reset the class to a valid state.
            this->clear();

            // Return the hash
            return temp_hash;
        }

    public:
        /// @brief  Simple type to hold the string representation of the hash.
        struct hash_string_type {
            char hash[(sha2::hash_size * 2) + 1] = {};
        };

        /// @brief  Convert a hash into its string representation.
        /// @param  hash The hash to convert.
        /// @return The string representation of the hash, with null termination.
        constexpr static hash_string_type hash_to_string(const hash_type& hash) {
            hash_string_type output;
            constexpr const char* hex_characters = "0123456789ABCDEF";
            for (unsigned int index = 0u; index < (sha2::hash_size * 2); ++index) {
                output.hash[index] = hex_characters[(hash.data[index / (sizeof(unsigned int) * 2)] >> ((((sizeof(unsigned int) * 2) - 1) - (index % (sizeof(unsigned int) * 2))) * 4)) & 0xF];
            }
            output.hash[sha2::hash_size * 2] = 0;
            return output;
        }
    };

    /// @brief  SHA2 hash with a size of 384 bits.
    template <>
    class sha2<sha2_size::bits_384> {
    public:
        /// @brief  Handy variable for accessing the sha2 size.
        constexpr static const sha2_size type = sha2_size::bits_512;

        /// @brief  Internal size of each processed block of data in bytes.
        constexpr static const unsigned int block_size = 1024 / 8;

        /// @brief  Size of the hash in bytes.
        constexpr static const unsigned int hash_size = 48;

    public:
        /// @brief  Simple type to hold the hash data.
        struct hash_type {
            unsigned long long int data[sha2::hash_size / sizeof(unsigned int)] = {
                0xCBBB9D5DC1059ED8, 0x629A292A367CD507, 0x9159015A3070DD17, 0x152FECD8F70E5939,
                0x67332667FFC00B31, 0x8EB44A8768581511
            };
            unsigned long long int additional_data[2] = {
                0xDB0C2E0D64F98FA7, 0x47B5481DBEFA4FA4
            };
        };

    private:
        /// @brief  Internal type used to construct blocks of data for processing.
        struct block_type {
            /// @brief  Total number of bytes that have been appended to the block.
            unsigned long long int length_bytes = 0;

            /// @brief  The data stored in the block.
            unsigned long long int data[sha2::block_size / sizeof(unsigned long long int)] = {};

            /// @brief Clear the data stored in the block.
            void clear() {
                this->length_bytes = 0;
                for (unsigned int index = 0; index < (sha2::block_size / sizeof(unsigned long long int)); ++index) {
                    this->data[index] = 0;
                }
            }

            /// @brief  Append a byte of data to the end of the block.
            /// @param  byte The byte of data to append.
            void append(const char byte) {
                this->data[this->length_bytes / sizeof(unsigned long long int)] |= static_cast<unsigned long long int>(static_cast<unsigned char>(byte)) << (((sizeof(unsigned long long int) - 1) - (this->length_bytes % sizeof(unsigned long long int))) * 8);
                ++this->length_bytes;
            }

            /// @brief  Check if the block is full.
            /// @return true if the block is full, false otherwise.
            bool is_full() const {
                return (this->length_bytes == sha2::block_size);
            }
        };

    private:
        /// @brief  The first 64-bits of the fractional parts of the cube roots of the first 80 primes.
        constexpr static const unsigned long long int constants[80] = {
            0x428A2F98D728AE22, 0x7137449123EF65CD, 0xB5C0FBCFEC4D3B2F, 0xE9B5DBA58189DBBC, 0x3956C25BF348B538,
            0x59F111F1B605D019, 0x923F82A4AF194F9B, 0xAB1C5ED5DA6D8118, 0xD807AA98A3030242, 0x12835B0145706FBE,
            0x243185BE4EE4B28C, 0x550C7DC3D5FFB4E2, 0x72BE5D74F27B896F, 0x80DEB1FE3B1696B1, 0x9BDC06A725C71235,
            0xC19BF174CF692694, 0xE49B69C19EF14AD2, 0xEFBE4786384F25E3, 0x0FC19DC68B8CD5B5, 0x240CA1CC77AC9C65,
            0x2DE92C6F592B0275, 0x4A7484AA6EA6E483, 0x5CB0A9DCBD41FBD4, 0x76F988DA831153B5, 0x983E5152EE66DFAB,
            0xA831C66D2DB43210, 0xB00327C898FB213F, 0xBF597FC7BEEF0EE4, 0xC6E00BF33DA88FC2, 0xD5A79147930AA725,
            0x06CA6351E003826F, 0x142929670A0E6E70, 0x27B70A8546D22FFC, 0x2E1B21385C26C926, 0x4D2C6DFC5AC42AED,
            0x53380D139D95B3DF, 0x650A73548BAF63DE, 0x766A0ABB3C77B2A8, 0x81C2C92E47EDAEE6, 0x92722C851482353B,
            0xA2BFE8A14CF10364, 0xA81A664BBC423001, 0xC24B8B70D0F89791, 0xC76C51A30654BE30, 0xD192E819D6EF5218,
            0xD69906245565A910, 0xF40E35855771202A, 0x106AA07032BBD1B8, 0x19A4C116B8D2D0C8, 0x1E376C085141AB53,
            0x2748774CDF8EEB99, 0x34B0BCB5E19B48A8, 0x391C0CB3C5C95A63, 0x4ED8AA4AE3418ACB, 0x5B9CCA4F7763E373,
            0x682E6FF3D6B2B8A3, 0x748F82EE5DEFB2FC, 0x78A5636F43172F60, 0x84C87814A1F0AB72, 0x8CC702081A6439EC,
            0x90BEFFFA23631E28, 0xA4506CEBDE82BDE9, 0xBEF9A3F7B2C67915, 0xC67178F2E372532B, 0xCA273ECEEA26619C,
            0xD186B8C721C0C207, 0xEADA7DD6CDE0EB1E, 0xF57D4F7FEE6ED178, 0x06F067AA72176FBA, 0x0A637DC5A2C898A6,
            0x113F9804BEF90DAE, 0x1B710B35131C471B, 0x28DB77F523047D84, 0x32CAAB7B40C72493, 0x3C9EBE0A15C9BEBC,
            0x431D67C49C100D4C, 0x4CC5D4BECB3E42B6, 0x597F299CFC657E2A, 0x5FCB6FAB3AD6FAEC, 0x6C44198C4A475817
        };

    private:
        /// @brief  The number of bytes of data that have been hashed.
        unsigned long long int hashed_length = 0;

        /// @brief  The current block of data being filled.
        block_type block;

        /// @brief  The current hash.
        hash_type hash;

    private:
        /// @brief  Rotate a 32 bit value right by a shift amount.
        /// @param  value The value to rotate.
        /// @param  shift The number of bits to rotate by.
        /// @return The value after it has been rotated right by shift bits.
        constexpr static unsigned long long int rotate_right(unsigned long long int value, unsigned long long int shift) {
            const unsigned long long int mask = (8 * sizeof(unsigned long long int) - 1);
            shift &= mask;
            return (value >> shift) | (value << ((-shift) & mask));
        }

        /// @brief  Perform the SHA2 hashing algorithm on a block of data.
        /// @param  initial_state The value of the hash before the addition of this block of data.
        /// @param  current_block The new block of data to add to the hash.
        /// @return The new hash after consuming the new block of data.
        constexpr static hash_type hash_block(const hash_type& initial_state, const block_type& current_block) {

            unsigned long long int A = initial_state.data[0];
            unsigned long long int B = initial_state.data[1];
            unsigned long long int C = initial_state.data[2];
            unsigned long long int D = initial_state.data[3];
            unsigned long long int E = initial_state.data[4];
            unsigned long long int F = initial_state.data[5];
            unsigned long long int G = initial_state.additional_data[0];
            unsigned long long int H = initial_state.additional_data[1];

            // Fill the working block from the current.
            unsigned long long int working_block[80] = {};
            for (unsigned int index = 0; index < sha2::block_size / sizeof(unsigned long long int); ++index) {
                working_block[index] = current_block.data[index];
            }

            // Mix to fill the remainder of the working block.
            for (unsigned int index = sha2::block_size / sizeof(unsigned long long int); index < 80; ++index) {
                const unsigned long long int S0 = rotate_right(working_block[index - 15], 1) ^ rotate_right(working_block[index - 15], 8) ^ (working_block[index - 15] >> 7);
                const unsigned long long int S1 = rotate_right(working_block[index - 2], 19) ^ rotate_right(working_block[index - 2], 61) ^ (working_block[index - 2] >> 6);
                working_block[index] = working_block[index - 16] + S0 + working_block[index - 7] + S1;
            }

            // Do the hash iterations.
            for (unsigned int iteration = 0; iteration < 80; ++iteration) {
                const unsigned long long int S1 = rotate_right(E, 14) ^ rotate_right(E, 18) ^ rotate_right(E, 41);
                const unsigned long long int CH = (E & F) ^ ((~E) & G);
                const unsigned long long int TEMP1 = H + S1 + CH + sha2::constants[iteration] + working_block[iteration];
                const unsigned long long int S0 = rotate_right(A, 28) ^ rotate_right(A, 34) ^ rotate_right(A, 39);
                const unsigned long long int MAJ = (A & B) ^ (A & C) ^ (B & C);
                const unsigned long long int TEMP2 = S0 + MAJ;

                H = G;
                G = F;
                F = E;
                E = D + TEMP1;
                D = C;
                C = B;
                B = A;
                A = TEMP1 + TEMP2;
            }

            return {
                {
                    initial_state.data[0] + A,
                    initial_state.data[1] + B,
                    initial_state.data[2] + C,
                    initial_state.data[3] + D,
                    initial_state.data[4] + E,
                    initial_state.data[5] + F,
                },
                {
                    initial_state.additional_data[0] + G,
                    initial_state.additional_data[1] + H
                }
            };
        }

    public:
        /// @brief  Clear the state of the SHA2 hash class back to its initial values.
        void clear() {
            this->hashed_length = 0;
            this->block.clear();
            this->hash = {};
        }

        /// @brief  Add data that is processed by the hash function, this can be repeatedly called.
        /// @param  data A pointer to an array of bytes to process.
        /// @param  length The length of the data array.
        void insert(const char* data, unsigned long long int length) {

            // Read a block of the input data (512 bits).
            for (unsigned long long int index = 0; index < length; ++index) {
                // Load data into the block one byte at a time.
                this->block.append(*data++);

                // If the block is full, hash it.
                if (this->block.is_full()) {
                    this->hash = sha2::hash_block(this->hash, this->block);
                    this->block.clear();
                }
            }

            this->hashed_length += length;
        }

        /// @brief  Finish consuming any cached data and return the hash before clearing the class.
        /// @return The hash of all the inserted data.
        hash_type finalise() {

            // Pad the data with a single 0x80 on the end.
            this->block.append(static_cast<char>(0x80));

            // Check if there is enough space in the final chunk for the data length.
            if (this->block.length_bytes > (sha2::block_size - (sizeof(unsigned long long int) * 2))) {
                this->hash = sha2::hash_block(this->hash, this->block);
                this->block.clear();
            }

            const unsigned long long int hashed_length_bits = this->hashed_length * 8;

            // Add the data length to the chunk.
            this->block.data[14] = 0ull; // The upper 64 bits of the 128 bit length value.
            this->block.data[15] = hashed_length_bits;

            // Hash the block.
            this->hash = sha2::hash_block(this->hash, this->block);

            // Get a copy of the hash so the class can be reset.
            hash_type temp_hash = this->hash;

            // Reset the class to a valid state.
            this->clear();

            // Return the hash
            return temp_hash;
        }

    public:
        /// @brief  Simple type to hold the string representation of the hash.
        struct hash_string_type {
            char hash[(sha2::hash_size * 2) + 1] = {};
        };

        /// @brief  Convert a hash into its string representation.
        /// @param  hash The hash to convert.
        /// @return The string representation of the hash, with null termination.
        constexpr static hash_string_type hash_to_string(const hash_type& hash) {
            hash_string_type output;
            constexpr const char* hex_characters = "0123456789ABCDEF";
            for (unsigned int index = 0u; index < (sha2::hash_size * 2); ++index) {
                output.hash[index] = hex_characters[(hash.data[index / (sizeof(unsigned long long int) * 2)] >> ((((sizeof(unsigned long long int) * 2) - 1) - (index % (sizeof(unsigned long long int) * 2))) * 4)) & 0xF];
            }
            output.hash[sha2::hash_size * 2] = 0;
            return output;
        }
    };

    /// @brief  SHA2 hash with a size of 512 bits.
    template <>
    class sha2<sha2_size::bits_512> {
    public:
        /// @brief  Handy variable for accessing the sha2 size.
        constexpr static const sha2_size type = sha2_size::bits_512;

        /// @brief  Internal size of each processed block of data in bytes.
        constexpr static const unsigned int block_size = 1024 / 8;

        /// @brief  Size of the hash in bytes.
        constexpr static const unsigned int hash_size = 64;

    public:
        /// @brief  Simple type to hold the hash data.
        struct hash_type {
            unsigned long long int data[sha2::hash_size / sizeof(unsigned int)] = {
                0x6A09E667F3BCC908, 0xBB67AE8584CAA73B, 0x3C6EF372FE94F82B, 0xA54FF53A5F1D36F1,
                0x510E527FADE682D1, 0x9B05688C2B3E6C1F, 0x1F83D9ABFB41BD6B, 0x5BE0CD19137E2179
            };
        };

    private:
        /// @brief  Internal type used to construct blocks of data for processing.
        struct block_type {
            /// @brief  Total number of bytes that have been appended to the block.
            unsigned long long int length_bytes = 0;

            /// @brief  The data stored in the block.
            unsigned long long int data[sha2::block_size / sizeof(unsigned long long int)] = {};

            /// @brief Clear the data stored in the block.
            void clear() {
                this->length_bytes = 0;
                for (unsigned int index = 0; index < (sha2::block_size / sizeof(unsigned long long int)); ++index) {
                    this->data[index] = 0;
                }
            }

            /// @brief  Append a byte of data to the end of the block.
            /// @param  byte The byte of data to append.
            void append(const char byte) {
                this->data[this->length_bytes / sizeof(unsigned long long int)] |= static_cast<unsigned long long int>(static_cast<unsigned char>(byte)) << (((sizeof(unsigned long long int) - 1) - (this->length_bytes % sizeof(unsigned long long int))) * 8);
                ++this->length_bytes;
            }

            /// @brief  Check if the block is full.
            /// @return true if the block is full, false otherwise.
            bool is_full() const {
                return (this->length_bytes == sha2::block_size);
            }
        };

    private:
        /// @brief  The first 64-bits of the fractional parts of the cube roots of the first 80 primes.
        constexpr static const unsigned long long int constants[80] = {
            0x428A2F98D728AE22, 0x7137449123EF65CD, 0xB5C0FBCFEC4D3B2F, 0xE9B5DBA58189DBBC, 0x3956C25BF348B538,
            0x59F111F1B605D019, 0x923F82A4AF194F9B, 0xAB1C5ED5DA6D8118, 0xD807AA98A3030242, 0x12835B0145706FBE,
            0x243185BE4EE4B28C, 0x550C7DC3D5FFB4E2, 0x72BE5D74F27B896F, 0x80DEB1FE3B1696B1, 0x9BDC06A725C71235,
            0xC19BF174CF692694, 0xE49B69C19EF14AD2, 0xEFBE4786384F25E3, 0x0FC19DC68B8CD5B5, 0x240CA1CC77AC9C65,
            0x2DE92C6F592B0275, 0x4A7484AA6EA6E483, 0x5CB0A9DCBD41FBD4, 0x76F988DA831153B5, 0x983E5152EE66DFAB,
            0xA831C66D2DB43210, 0xB00327C898FB213F, 0xBF597FC7BEEF0EE4, 0xC6E00BF33DA88FC2, 0xD5A79147930AA725,
            0x06CA6351E003826F, 0x142929670A0E6E70, 0x27B70A8546D22FFC, 0x2E1B21385C26C926, 0x4D2C6DFC5AC42AED,
            0x53380D139D95B3DF, 0x650A73548BAF63DE, 0x766A0ABB3C77B2A8, 0x81C2C92E47EDAEE6, 0x92722C851482353B,
            0xA2BFE8A14CF10364, 0xA81A664BBC423001, 0xC24B8B70D0F89791, 0xC76C51A30654BE30, 0xD192E819D6EF5218,
            0xD69906245565A910, 0xF40E35855771202A, 0x106AA07032BBD1B8, 0x19A4C116B8D2D0C8, 0x1E376C085141AB53,
            0x2748774CDF8EEB99, 0x34B0BCB5E19B48A8, 0x391C0CB3C5C95A63, 0x4ED8AA4AE3418ACB, 0x5B9CCA4F7763E373,
            0x682E6FF3D6B2B8A3, 0x748F82EE5DEFB2FC, 0x78A5636F43172F60, 0x84C87814A1F0AB72, 0x8CC702081A6439EC,
            0x90BEFFFA23631E28, 0xA4506CEBDE82BDE9, 0xBEF9A3F7B2C67915, 0xC67178F2E372532B, 0xCA273ECEEA26619C,
            0xD186B8C721C0C207, 0xEADA7DD6CDE0EB1E, 0xF57D4F7FEE6ED178, 0x06F067AA72176FBA, 0x0A637DC5A2C898A6,
            0x113F9804BEF90DAE, 0x1B710B35131C471B, 0x28DB77F523047D84, 0x32CAAB7B40C72493, 0x3C9EBE0A15C9BEBC,
            0x431D67C49C100D4C, 0x4CC5D4BECB3E42B6, 0x597F299CFC657E2A, 0x5FCB6FAB3AD6FAEC, 0x6C44198C4A475817
        };

    private:
        /// @brief  The number of bytes of data that have been hashed.
        unsigned long long int hashed_length = 0;

        /// @brief  The current block of data being filled.
        block_type block;

        /// @brief  The current hash.
        hash_type hash;

    private:
        /// @brief  Rotate a 32 bit value right by a shift amount.
        /// @param  value The value to rotate.
        /// @param  shift The number of bits to rotate by.
        /// @return The value after it has been rotated right by shift bits.
        constexpr static unsigned long long int rotate_right(unsigned long long int value, unsigned long long int shift) {
            const unsigned long long int mask = (8 * sizeof(unsigned long long int) - 1);
            shift &= mask;
            return (value >> shift) | (value << ((-shift) & mask));
        }

        /// @brief  Perform the SHA2 hashing algorithm on a block of data.
        /// @param  initial_state The value of the hash before the addition of this block of data.
        /// @param  current_block The new block of data to add to the hash.
        /// @return The new hash after consuming the new block of data.
        constexpr static hash_type hash_block(const hash_type& initial_state, const block_type& current_block) {

            unsigned long long int A = initial_state.data[0];
            unsigned long long int B = initial_state.data[1];
            unsigned long long int C = initial_state.data[2];
            unsigned long long int D = initial_state.data[3];
            unsigned long long int E = initial_state.data[4];
            unsigned long long int F = initial_state.data[5];
            unsigned long long int G = initial_state.data[6];
            unsigned long long int H = initial_state.data[7];

            // Fill the working block from the current.
            unsigned long long int working_block[80] = {};
            for (unsigned int index = 0; index < sha2::block_size / sizeof(unsigned long long int); ++index) {
                working_block[index] = current_block.data[index];
            }

            // Mix to fill the remainder of the working block.
            for (unsigned int index = sha2::block_size / sizeof(unsigned long long int); index < 80; ++index) {
                const unsigned long long int S0 = rotate_right(working_block[index - 15], 1) ^ rotate_right(working_block[index - 15], 8) ^ (working_block[index - 15] >> 7);
                const unsigned long long int S1 = rotate_right(working_block[index - 2], 19) ^ rotate_right(working_block[index - 2], 61) ^ (working_block[index - 2] >> 6);
                working_block[index] = working_block[index - 16] + S0 + working_block[index - 7] + S1;
            }

            // Do the hash iterations.
            for (unsigned int iteration = 0; iteration < 80; ++iteration) {
                const unsigned long long int S1 = rotate_right(E, 14) ^ rotate_right(E, 18) ^ rotate_right(E, 41);
                const unsigned long long int CH = (E & F) ^ ((~E) & G);
                const unsigned long long int TEMP1 = H + S1 + CH + sha2::constants[iteration] + working_block[iteration];
                const unsigned long long int S0 = rotate_right(A, 28) ^ rotate_right(A, 34) ^ rotate_right(A, 39);
                const unsigned long long int MAJ = (A & B) ^ (A & C) ^ (B & C);
                const unsigned long long int TEMP2 = S0 + MAJ;

                H = G;
                G = F;
                F = E;
                E = D + TEMP1;
                D = C;
                C = B;
                B = A;
                A = TEMP1 + TEMP2;
            }

            return {{
                initial_state.data[0] + A,
                initial_state.data[1] + B,
                initial_state.data[2] + C,
                initial_state.data[3] + D,
                initial_state.data[4] + E,
                initial_state.data[5] + F,
                initial_state.data[6] + G,
                initial_state.data[7] + H
            }};
        }

    public:
        /// @brief  Clear the state of the SHA2 hash class back to its initial values.
        void clear() {
            this->hashed_length = 0;
            this->block.clear();
            this->hash = {};
        }

        /// @brief  Add data that is processed by the hash function, this can be repeatedly called.
        /// @param  data A pointer to an array of bytes to process.
        /// @param  length The length of the data array.
        void insert(const char* data, unsigned long long int length) {

            // Read a block of the input data (512 bits).
            for (unsigned long long int index = 0; index < length; ++index) {
                // Load data into the block one byte at a time.
                this->block.append(*data++);

                // If the block is full, hash it.
                if (this->block.is_full()) {
                    this->hash = sha2::hash_block(this->hash, this->block);
                    this->block.clear();
                }
            }

            this->hashed_length += length;
        }

        /// @brief  Finish consuming any cached data and return the hash before clearing the class.
        /// @return The hash of all the inserted data.
        hash_type finalise() {

            // Pad the data with a single 0x80 on the end.
            this->block.append(static_cast<char>(0x80));

            // Check if there is enough space in the final chunk for the data length.
            if (this->block.length_bytes > (sha2::block_size - (sizeof(unsigned long long int) * 2))) {
                this->hash = sha2::hash_block(this->hash, this->block);
                this->block.clear();
            }

            const unsigned long long int hashed_length_bits = this->hashed_length * 8;

            // Add the data length to the chunk.
            this->block.data[14] = 0ull; // The upper 64 bits of the 128 bit length value.
            this->block.data[15] = hashed_length_bits;

            // Hash the block.
            this->hash = sha2::hash_block(this->hash, this->block);

            // Get a copy of the hash so the class can be reset.
            hash_type temp_hash = this->hash;

            // Reset the class to a valid state.
            this->clear();

            // Return the hash
            return temp_hash;
        }

    public:
        /// @brief  Simple type to hold the string representation of the hash.
        struct hash_string_type {
            char hash[(sha2::hash_size * 2) + 1] = {};
        };

        /// @brief  Convert a hash into its string representation.
        /// @param  hash The hash to convert.
        /// @return The string representation of the hash, with null termination.
        constexpr static hash_string_type hash_to_string(const hash_type& hash) {
            hash_string_type output;
            constexpr const char* hex_characters = "0123456789ABCDEF";
            for (unsigned int index = 0u; index < (sha2::hash_size * 2); ++index) {
                output.hash[index] = hex_characters[(hash.data[index / (sizeof(unsigned long long int) * 2)] >> ((((sizeof(unsigned long long int) * 2) - 1) - (index % (sizeof(unsigned long long int) * 2))) * 4)) & 0xF];
            }
            output.hash[sha2::hash_size * 2] = 0;
            return output;
        }
    };
}

#endif // GTL_SHA2_HPP
