/*
Copyright (C) 2018-2023 Geoffrey Daniels. https://gpdaniels.com/

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License only.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#pragma once
#ifndef GTL_PARSER_PL0_HPP
#define GTL_PARSER_PL0_HPP

// Summary: A parser and interpreter for the PL/0 programming language. [wip]

#include <parser/generator>

#if defined(_MSC_VER)
#   pragma warning(push, 0)
#endif

#include <string>
#include <variant>
#include <vector>

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

// https://en.wikipedia.org/wiki/PL/0
// [1] pl0        ::= block "."
// [2] block      ::= [ "CONST" ident "=" number {"," ident "=" number} ";"] [ "VAR" ident {"," ident} ";"] { "PROCEDURE" ident ";" block ";" } statement
// [3] statement  ::= [ ident ":=" expression | "call" ident | "?" ident | "!" expression | "BEGIN" statement {";" statement } "END" | "IF" condition "THEN" statement | "WHILE" condition "DO" statement ]
// [4] condition  ::= "ODD" expression | expression ("="|"#"|"<"|"<="|">"|">=") expression
// [5] expression ::= [ "+"|"-"] term { ("+"|"-") term}
// [6] term       ::= factor {("*"|"/") factor}
// [7] factor     ::= identifier | number | "(" expression ")"

namespace gtl {
    class pl0 final {
    private:
        enum class token_type {
            constant,           // 2 x token_data   (x = y)         // x must be a string, y must be an integer.
            variable,           // 2 x token_data   (x)             // x must be a string, second element of data must be a 0 integer.
            procedure,          // 2 x token_data   (x{y})          // x must be a string.
            identifier,         // string           (x)             // x must be a string.
            number,             // int              (x)             // x must be an integer.
            assignement,        // 2 x token_data   (x := y)        // x must be a string.
            positive,           // 1 x token_data   (+x)            //
            negative,           // 1 x token_data   (-x)            //
            operation,          // string           (x)             // x must be a string.
            comparison,         // string           (x)             // x must be a string.
            term_operation,     // N x token_data   (x [+-] ...)    // there can be any number of parameters spaced out by operations.
            factor_operation,   // N x token_data   (x [*/] ...)    // there can be any number of parameters spaced out by operations.
            test_odd,           // 1 x token_data   (ODD x)         //
            test_comparison,    // 3 x token_data   (x [y] z)       // y must be a comparison.
            call,               // string           (CALL x)        // x must be a string.
            read,               // string           (?x)            // x must be a string.
            write,              // string           (!x)            // x must be a string.
            if_then,            // 2 x token_data   (IF x THEN y)   //
            while_do,           // 2 x token_data   (WHILE x DO y)  //
            scope,              // N x token_data   (...)           // there can be any number of statements.
        };

    public:
        class token_data {
        public:
            token_type type;
            std::variant<std::string, int, std::vector<token_data>> data;
            bool operator==(const token_data& other) const {
                if (this->type != other.type) {
                    return false;
                }
                switch (this->type) {
                    case token_type::identifier:
                    case token_type::operation:
                    case token_type::comparison:
                    case token_type::call:
                    case token_type::read:
                        return std::get<std::string>(this->data) == std::get<std::string>(other.data);
                    case token_type::number:
                        return std::get<int>(this->data) == std::get<int>(other.data);
                    case token_type::constant:
                    case token_type::variable:
                    case token_type::procedure:
                    case token_type::assignement:
                    case token_type::positive:
                    case token_type::negative:
                    case token_type::term_operation:
                    case token_type::factor_operation:
                    case token_type::test_odd:
                    case token_type::test_comparison:
                    case token_type::write:
                    case token_type::if_then:
                    case token_type::while_do:
                    case token_type::scope:
                        return std::get<std::vector<token_data>>(this->data) == std::get<std::vector<token_data>>(other.data);
                }
                return false;
            }
        };

    private:
        using parser = gtl::generator<token_data>;

    public:
        std::vector<token_data> parse(const std::string& code) {
            parser whitespace = parser::terminal_any(' ', '\t', '\r', '\n');
            parser whitespace_optional = parser::recurse(parser::disjunction(whitespace, parser::empty()));
            parser whitespace_required = whitespace + whitespace_optional;

            parser letter = parser::terminal_any(
                //'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
                //'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
                'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
                'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'
            );

            parser digit = parser::terminal_any(
                '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'
            );

            parser identifier =
                parser::sequence(
                    letter,
                    parser::recurse(
                        parser::disjunction(
                            parser::empty(),
                            letter,
                            digit
                        )
                    )
                )
                >> [](const std::vector<char>& terminals){
                    return token_data{
                        token_type::identifier,
                        std::string(terminals.begin(), terminals.end())
                    };
                };

            parser number =
                parser::sequence(
                    parser::disjunction(
                        parser::empty(),
                        parser::terminal_any('+','-')
                    ),
                    parser::sequence(
                        digit,
                        parser::recurse(
                            parser::disjunction(
                                parser::empty(),
                                digit
                            )
                        )
                    )
                )
                >> [](const std::vector<char>& terminals){
                    return token_data{
                        token_type::number,
                        std::stoi(std::string(terminals.begin(), terminals.end()))
                    };
                };

            parser plus_minus =
                parser::terminal_any(
                    '+', '-'
                )
                >> [](const std::vector<char>& terminals){
                    return token_data{
                        token_type::operation,
                        std::string(terminals.begin(), terminals.end())
                    };
                };

            parser multiply_divide =
                parser::terminal_any(
                    '*', '/'
                )
                >> [](const std::vector<char>& terminals){
                    return token_data{
                        token_type::operation,
                        std::string(terminals.begin(), terminals.end())
                    };
                };

            parser comparison =
                parser::disjunction(
                    parser::terminal_any(
                        '=', '#', '<', '>'
                    ),
                    parser::terminal(
                        "<="
                    ),
                    parser::terminal(
                        ">="
                    )
                )
                >> [](const std::vector<char>& terminals){
                    return token_data{
                        token_type::comparison,
                        std::string(terminals.begin(), terminals.end())
                    };
                };

            parser expression;

            parser factor =
                parser::disjunction(
                    identifier,
                    number,
                    parser::sequence(
                        parser::terminal_any('('),
                        parser::reference(expression),
                        parser::terminal_any(')')
                    )
                );

            parser term =
                parser::sequence(
                    factor,
                    parser::recurse(
                        parser::disjunction(
                            parser::empty(),
                            parser::sequence(
                                multiply_divide,
                                factor
                            )
                        )
                    )
                )
                ->* [](const std::vector<token_data>& tokens){
                    return token_data{
                        token_type::factor_operation,
                        tokens
                    };
                };

            expression =
                parser::sequence(
                    parser::sequence(
                        parser::disjunction(
                            parser::empty(),
                            plus_minus
                        ),
                        term
                    )
                    ->* [](const std::vector<token_data>& tokens){
                        // No positive or negative sign.
                        if (tokens.size() == 1) {
                            return tokens[0];
                        }
                        // A positive or negative sign.
                        else if (tokens.size() == 2) {
                            if (tokens[0].type == token_type::operation) {
                                switch (std::get<std::string>(tokens.front().data)[0]) {
                                    case '+': return token_data{token_type::positive, tokens[1].data};
                                    case '-': return token_data{token_type::negative, tokens[1].data};
                                    default: std::fprintf(stderr, "ERROR 1\n"); return token_data{};
                                }
                            }
                        }
                        std::fprintf(stderr, "ERROR 2\n"); return token_data{};
                    },
                    parser::recurse(
                        parser::disjunction(
                            parser::empty(),
                            parser::sequence(
                                plus_minus,
                                term
                            )
                        )
                    )
                )
                ->* [](const std::vector<token_data>& tokens){
                    return token_data{
                        token_type::term_operation,
                        tokens
                    };
                };

            parser condition =
                parser::disjunction(
                    parser::sequence(
                        parser::terminal(
                            "ODD"
                        ),
                        expression
                    )
                    ->* [](const std::vector<token_data>& tokens){
                        if (tokens.size() != 1) std::fprintf(stderr, "ERROR 3\n");
                        return token_data{
                            token_type::test_odd,
                            tokens
                        };
                    },
                    parser::sequence(
                        expression,
                        comparison,
                        expression
                    )
                    ->* [](const std::vector<token_data>& tokens){
                        if (tokens.size() != 3) std::fprintf(stderr, "ERROR 4\n");
                        return token_data{
                            token_type::test_comparison,
                            tokens
                        };
                    }
                );

            parser statement;
            statement =
                parser::disjunction(
                    parser::sequence(
                        identifier,
                        parser::terminal(":="),
                        expression
                    )
                    ->* [](const std::vector<token_data>& tokens){
                        if (tokens.size() != 2) std::fprintf(stderr, "ERROR 5\n");
                        return token_data{
                            token_type::assignement,
                            tokens
                        };
                    },
                    parser::sequence(
                        parser::terminal("CALL"),
                        identifier
                    ) ->* [](const std::vector<token_data>& tokens){
                        if (tokens.size() != 1) std::fprintf(stderr, "ERROR 6\n");
                        return token_data{
                            token_type::call,
                            std::get<std::string>(tokens[0].data)
                        };
                    },
                    parser::sequence(
                        parser::terminal_any('?'),
                        identifier
                    ) ->* [](const std::vector<token_data>& tokens){
                        if (tokens.size() != 1) std::fprintf(stderr, "ERROR 7\n");
                        return token_data{
                            token_type::read,
                            std::get<std::string>(tokens[0].data)
                        };
                    },
                    parser::sequence(
                        parser::terminal_any('!'),
                        identifier
                    ) ->* [](const std::vector<token_data>& tokens){
                        if (tokens.size() != 1) std::fprintf(stderr, "ERROR 8\n");
                        return token_data{
                            token_type::write,
                            std::get<std::string>(tokens[0].data)
                        };
                    },
                    parser::sequence(parser::terminal("BEGIN"),
                        parser::reference(statement),
                        parser::recurse(
                            parser::disjunction(
                                parser::empty(),
                                parser::sequence(
                                    parser::terminal_any(';'),
                                    parser::reference(statement)
                                )
                            )
                        ),
                        parser::terminal("END")
                    ) ->* [](const std::vector<token_data>& tokens){
                        return token_data{
                            token_type::scope,
                            tokens
                        };
                    },
                    parser::sequence(
                        parser::terminal("IF"),
                        condition,
                        parser::terminal("THEN"),
                        parser::reference(statement)
                    ) ->* [](const std::vector<token_data>& tokens){
                        if (tokens.size() != 2) std::fprintf(stderr, "ERROR 9\n");
                        return token_data{
                            token_type::if_then,
                            tokens
                        };
                    },
                    parser::sequence(
                        parser::terminal("WHILE"),
                        condition,
                        parser::terminal("DO"),
                        parser::reference(statement)
                    ) ->* [](const std::vector<token_data>& tokens){
                        if (tokens.size() != 2) std::fprintf(stderr, "ERROR 10\n");
                        return token_data{
                            token_type::while_do,
                            tokens
                        };
                    }
                );

            parser constant =
                parser::sequence(
                    identifier,
                    parser::terminal_any('='),
                    number
                ) ->* [](const std::vector<token_data>& tokens){
                    if (tokens.size() != 2) std::fprintf(stderr, "ERROR 11\n");
                    return token_data{
                        token_type::constant,
                        tokens
                    };
                };

            parser variable =
                identifier
                ->* [](const std::vector<token_data>& tokens){
                    if (tokens.size() != 1) std::fprintf(stderr, "ERROR 12\n");
                    return token_data{
                        token_type::variable,
                        std::vector<token_data>{ tokens[0], token_data{ token_type::number, 0 } }
                    };
                };

            parser block;
            block =
                parser::sequence(
                    parser::disjunction(
                        parser::empty(),
                        parser::sequence(
                            parser::terminal("CONST"),
                            constant,
                            parser::recurse(
                                parser::disjunction(
                                    parser::empty(),
                                    parser::sequence(
                                        parser::terminal_any(','),
                                        constant
                                    )
                                )
                            ),
                            parser::terminal_any(';')
                        )
                    ),
                    parser::disjunction(
                        parser::empty(),
                        parser::sequence(
                            parser::terminal("VAR"),
                            variable,
                            parser::recurse(
                                parser::disjunction(
                                    parser::empty(),
                                    parser::sequence(
                                        parser::terminal_any(','),
                                        variable
                                    )
                                )
                            ),
                            parser::terminal_any(';')
                        )
                    ),
                    parser::disjunction(
                        parser::empty(),
                        parser::recurse(
                            parser::disjunction(
                                parser::empty(),
                                parser::sequence(
                                    parser::terminal("PROCEDURE"),
                                    identifier,
                                    parser::terminal_any(';'),
                                    parser::reference(block),
                                    parser::terminal_any(';')
                                ) ->* [](const std::vector<token_data>& tokens){
                                    return token_data{
                                        token_type::procedure,
                                        tokens
                                    };
                                }
                            )
                        )
                    ),
                    statement
                );

            parser pl0 = block + parser::terminal_any('.');

            parser::parse_forest_type forest;
            for (char character : code) {
                // TODO: Remove this bodge. Currently whitespace is not handled in the grammar.
                // TODO: This also causes an ambiguity because BEGIN and END leak into the name of the squ and x identifiers.
                // TODO: To avoid the ambiguity right now control terminals are all uppercase and identifiers are all lowercase.
                if (character == ' ') continue;
                if (character == '\t') continue;
                if (character == '\r') continue;
                if (character == '\n') continue;
                pl0.parse(character, forest);
            }
            std::vector<token_data> tokens;
            if (pl0.finalise(forest, &tokens, nullptr)) {
                return tokens;
            }
            return {};
        }

    public:
        void interpret(const std::vector<token_data>& tokens) const {
            std::vector<token_data> local_tokens = tokens;
            for (token_data& token : local_tokens) {
                this->interpret(token, {&local_tokens});
            }
        }

    private:
        int interpret(token_data& token, std::vector<std::vector<token_data>*> scopes) const {
    //        fprintf(stderr, "DEBUG\n");
    //        for (std::vector<std::vector<token_data>*>::reverse_iterator scope = scopes.rbegin(); scope != scopes.rend(); ++scope) {
    //            for (token_data& other : **scope) {
    //                if ((other.type == token_type::constant) || (other.type == token_type::variable)) {
    //                    std::vector<token_data>& value = std::get<std::vector<token_data>>(other.data);
    //                    fprintf(stderr, "  %s = %d\n", std::get<std::string>(value[0].data).c_str(), std::get<int>(value[1].data));
    //                }
    //            }
    //        }
    //        fprintf(stderr, "\n");

            switch (token.type) {
                case token_type::constant: { break; }
                case token_type::variable: { break; }
                case token_type::procedure: { break; }
                case token_type::identifier: {
                    for (std::vector<std::vector<token_data>*>::reverse_iterator scope = scopes.rbegin(); scope != scopes.rend(); ++scope) {
                        for (token_data& other : **scope) {
                            if ((other.type == token_type::constant) || (other.type == token_type::variable)) {
                                std::vector<token_data>& value = std::get<std::vector<token_data>>(other.data);
                                if (std::get<std::string>(value[0].data) == std::get<std::string>(token.data)) {
                                    return std::get<int>(value[1].data);
                                }
                            }
                        }
                    }
                    fprintf(stderr, "ERROR Failed to find identifier.\n");
                } break;
                case token_type::number: {
                    return std::get<int>(token.data);
                } break;
                case token_type::assignement: {
                    bool found = false;
                    std::vector<token_data>& assignement = std::get<std::vector<token_data>>(token.data);
                    for (std::vector<std::vector<token_data>*>::reverse_iterator scope = scopes.rbegin(); scope != scopes.rend(); ++scope) {
                        for (token_data& other : **scope) {
                            if (other.type == token_type::variable) {
                                std::vector<token_data>& variable = std::get<std::vector<token_data>>(other.data);
                                if (std::get<std::string>(variable[0].data) == std::get<std::string>(assignement[0].data)) {
                                    std::get<int>(variable[1].data) = this->interpret(assignement[1], scopes);
                                    found = true;
                                    break;
                                }
                            }
                        }
                        if (found) {
                            break;
                        }
                    }
                    if (!found) {
                        fprintf(stderr, "ERROR Failed to assign value.\n");
                    }
                } break;
                case token_type::positive: {
                    return +this->interpret(std::get<std::vector<token_data>>(token.data)[1], scopes);
                } break;
                case token_type::negative: {
                    return -this->interpret(std::get<std::vector<token_data>>(token.data)[1], scopes);
                } break;
                case token_type::operation: {
                    std::fprintf(stderr, "ERROR Unexpected operation.\n");
                } break;
                case token_type::comparison: {
                    std::fprintf(stderr, "ERROR Unexpected comparison.\n");
                } break;
                case token_type::term_operation: {
                    std::vector<token_data>& term_operation = std::get<std::vector<token_data>>(token.data);
                    int lhs = this->interpret(term_operation[0], scopes);
                    for (size_t i = 1; i < std::get<std::vector<token_data>>(token.data).size(); i += 2) {
                        const std::string operation = std::get<std::string>(term_operation[i].data);
                        const int rhs = this->interpret(term_operation[i + 1], scopes);
                        if (operation == "+") {
                            lhs += rhs;
                        }
                        else if (operation == "-") {
                            lhs -= rhs;
                        }
                    }
                    return lhs;
                } break;
                case token_type::factor_operation: {
                    std::vector<token_data>& factor_operation = std::get<std::vector<token_data>>(token.data);
                    int lhs = this->interpret(factor_operation[0], scopes);
                    for (size_t i = 1; i < std::get<std::vector<token_data>>(token.data).size(); i += 2) {
                        const std::string operation = std::get<std::string>(factor_operation[i].data);
                        const int rhs = this->interpret(factor_operation[i + 1], scopes);
                        if (operation == "*") {
                            lhs *= rhs;
                        }
                        else if (operation == "/") {
                            lhs /= rhs;
                        }
                    }
                    return lhs;
                } break;
                case token_type::test_odd: {
                    std::vector<token_data>& test_odd = std::get<std::vector<token_data>>(token.data);
                    if (test_odd.size() > 0) {
                        fprintf(stderr, "ERROR size error.\n");
                    }
                    return static_cast<int>(this->interpret(test_odd[0], scopes) % 2 == 1);
                } break;
                case token_type::test_comparison: {
                    std::vector<token_data>& test_comparison = std::get<std::vector<token_data>>(token.data);
                    const int lhs = this->interpret(test_comparison[0], scopes);
                    const std::string comparison = std::get<std::string>(test_comparison[1].data);
                    const int rhs = this->interpret(test_comparison[2], scopes);
                    if (comparison == "=") {
                        return static_cast<int>(lhs == rhs);
                    }
                    else if (comparison == "#") {
                        return static_cast<int>(lhs != rhs);
                    }
                    else if (comparison == "<") {
                        return static_cast<int>(lhs < rhs);
                    }
                    else if (comparison == ">") {
                        return static_cast<int>(lhs > rhs);
                    }
                    else if (comparison == "<=") {
                        return static_cast<int>(lhs <= rhs);
                    }
                    else if (comparison == ">=") {
                        return static_cast<int>(lhs >= rhs);
                    }
                    else {
                        fprintf(stderr, "ERROR Failed compare.\n");
                    }
                } break;
                case token_type::call: {
                    bool found = false;
                    std::string& call = std::get<std::string>(token.data);
                    for (std::vector<std::vector<token_data>*>::reverse_iterator scope = scopes.rbegin(); scope != scopes.rend(); ++scope) {
                        for (token_data& other : **scope) {
                            if (other.type == token_type::procedure) {
                                std::vector<token_data>& procedure = std::get<std::vector<token_data>>(other.data);
                                if (std::get<std::string>(procedure[0].data) == call) {
                                    scopes.push_back(&procedure);
                                    for (size_t i = 1; i < procedure.size(); ++i) {
                                        this->interpret(procedure[i], scopes);
                                    }
                                    scopes.pop_back();
                                    found = true;
                                    break;
                                }
                            }
                        }
                        if (found) {
                            break;
                        }
                    }
                    if (!found) {
                        fprintf(stderr, "ERROR Failed to call prodecure.\n");
                    }
                } break;
                case token_type::read: {
                    bool found = false;
                    for (std::vector<std::vector<token_data>*>::reverse_iterator scope = scopes.rbegin(); scope != scopes.rend(); ++scope) {
                        for (token_data& other : **scope) {
                            if (other.type == token_type::variable) {
                                std::vector<token_data>& variable = std::get<std::vector<token_data>>(other.data);
                                if (std::get<std::string>(variable[0].data) == std::get<std::string>(token.data)) {
                                    if (std::scanf("%d", &std::get<int>(variable[1].data)) != 1) {
                                        fprintf(stderr, "ERROR Failed to read correct number of values.\n");
                                    }
                                    found = true;
                                    break;
                                }
                            }
                        }
                        if (found) {
                            break;
                        }
                    }
                    if (!found) {
                        fprintf(stderr, "ERROR Failed to read value.\n");
                    }
                } break;
                case token_type::write: {
                    bool found = false;
                    for (std::vector<std::vector<token_data>*>::reverse_iterator scope = scopes.rbegin(); scope != scopes.rend(); ++scope) {
                        for (token_data& other : **scope) {
                            if ((other.type == token_type::constant) || (other.type == token_type::variable)) {
                                std::vector<token_data>& value = std::get<std::vector<token_data>>(other.data);
                                if (std::get<std::string>(value[0].data) == std::get<std::string>(token.data)) {
                                    std::printf("%d\n", std::get<int>(value[1].data));
                                    found = true;
                                    break;
                                }
                            }
                        }
                        if (found) {
                            break;
                        }
                    }
                    if (!found) {
                        fprintf(stderr, "ERROR Failed to read value.\n");
                    }
                } break;
                case token_type::if_then: {
                    std::vector<token_data>& if_then = std::get<std::vector<token_data>>(token.data);
                    if (this->interpret(if_then[0], scopes)) {
                        this->interpret(if_then[1], scopes);
                    }
                } break;
                case token_type::while_do: {
                    std::vector<token_data>& while_do = std::get<std::vector<token_data>>(token.data);
                    while (this->interpret(while_do[0], scopes)) {
                        this->interpret(while_do[1], scopes);
                    }
                } break;
                case token_type::scope: {
                    std::vector<token_data>& scope = std::get<std::vector<token_data>>(token.data);
                    for (token_data& scope_token : scope) {
                        this->interpret(scope_token, scopes);
                    }
                } break;
            }
            return 0;
        }
    };
}

#endif // GTL_PARSER_PL0_HPP
