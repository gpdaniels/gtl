/*
Copyright (C) 2018-2024 Geoffrey Daniels. https://gpdaniels.com/

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License only.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#pragma once
#ifndef GTL_VISION_MATCH_SCORE_NCC_HPP
#define GTL_VISION_MATCH_SCORE_NCC_HPP

// Summary: Normalised cross correleation between two patches. [wip]

#if defined(_MSC_VER)
#pragma warning(push, 0)
#endif

#include <cmath>

#if defined(_MSC_VER)
#pragma warning(pop)
#endif

namespace gtl {
    template <
        int patch_width = 8,
        int patch_height = 8,
        typename type_lhs = unsigned char,
        typename type_rhs = unsigned char>
    float ncc(
        const type_lhs* __restrict data_lhs,
        const int stride_lhs,
        const type_rhs* __restrict data_rhs,
        const int stride_rhs) {
        const int step_lhs = stride_lhs - patch_width;
        const int step_rhs = stride_rhs - patch_width;

        float numerator = 0;
        float denominator_lhs = 0;
        float denominator_rhs = 0;

        for (int y = 0; y < patch_height; ++y, data_lhs += step_lhs, data_rhs += step_rhs) {
            for (int x = 0; x < patch_width; ++x, ++data_lhs, ++data_rhs) {
                const float pixel_lhs = *data_lhs;
                const float pixel_rhs = *data_rhs;
                numerator += pixel_lhs * pixel_rhs;
                denominator_lhs += pixel_lhs * pixel_lhs;
                denominator_rhs += pixel_rhs * pixel_rhs;
            }
        }

        const float denominator_squared = denominator_lhs * denominator_rhs;

        // Check if every pixel in the lhs or the rhs was zero.
        if (std::abs(denominator_squared) < 1e-6f) {
            // If both sides were zero, return -1.0f, if only one side return 0.0f.
            return -static_cast<float>(std::abs(denominator_lhs - denominator_rhs) < 1e-6f);
        }

        return -(numerator / std::sqrt(denominator_squared));
    }
}

#endif // GTL_VISION_MATCH_SCORE_NCC_HPP
