/*
Copyright (C) 2018-2022 Geoffrey Daniels. http://gpdaniels.com/

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License only.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#include <main.tests.hpp>
#include <comparison.tests.hpp>
#include <optimise.tests.hpp>
#include <require.tests.hpp>

#include <vision/feature/descriptor/rs_brief>

#if defined(_MSC_VER)
#   pragma warning(push, 0)
#endif

#include <type_traits>

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

TEST(rs_brief, function, gradient) {
    // Create some data.
    constexpr static const unsigned int data_width = 128;
    constexpr static const unsigned int data_height = 64;
    unsigned char data[data_height][data_width] = {};
    for (unsigned int y = 0; y < data_height; ++y) {
        for (unsigned int x = 0; x < data_width; ++x) {
            data[y][x] = static_cast<unsigned char>(x + y);
        }
    }

    // Descriptors calculated using OpenCV:
    gtl::binary_descriptor<32> descriptors_regression[36] {
        { 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9 },
        { 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9 },
        { 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9 },
        { 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD },
        { 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD },
        { 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD },
        { 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F },
        { 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E },
        { 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E },
        { 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E },
        { 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E },
        { 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E },
        { 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E },
        { 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E },
        { 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E },
        { 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E },
        { 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06 },
        { 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06 },
        { 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06 },
        { 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06 },
        { 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06 },
        { 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02 },
        { 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00 },
        { 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00 },
        { 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60 },
        { 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71 },
        { 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71 },
        { 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1 },
        { 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1 },
        { 0xF1, 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1 },
        { 0xF1, 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1 },
        { 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1 },
        { 0xF1, 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1 },
        { 0xF9, 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1 },
        { 0xF9, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9 },
        { 0xF9, 0xF9, 0xF9, 0xFD, 0xFD, 0x8F, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00, 0x60, 0x71, 0x71, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF9, 0xF9 }
    };

    gtl::binary_descriptor<32> descriptors[36];
    for (int angle = 0; angle < 360; angle += 10) {
        gtl::rs_brief(&data[data_height / 2][data_width / 2], data_width, static_cast<float>(angle), descriptors[angle / 10]);
    }

    for (int angle = 0; angle < 360; angle += 10) {
        REQUIRE_SILENT(testbench::is_memory_same(&descriptors[angle / 10][0], &descriptors_regression[angle / 10][0], 32));

        if (!testbench::is_memory_same(&descriptors[angle / 10][0], &descriptors_regression[angle / 10][0], 32)) {
            PRINT("Angle %u:\n", angle);
            for (unsigned int byte = 0; byte < 32; ++byte) {
                PRINT("0x%02x, ", descriptors_regression[angle / 10][byte]);
            }
            PRINT("\n");
            for (unsigned int byte = 0; byte < 32; ++byte) {
                PRINT("0x%02x, ", descriptors[angle / 10][byte]);
            }
            PRINT("\n");
            for (unsigned int byte = 0; byte < 32; ++byte) {
                if (descriptors_regression[angle / 10][byte] != descriptors[angle / 10][byte]) {
                    PRINT("^^^^^ ");
                }
                else {
                    PRINT("      ");
                }
            }
            PRINT("\n");
        }
    }

    gtl::binary_descriptor<32> descriptors_backwards[36];
    for (int angle = 0; angle < 360; angle += 10) {
        gtl::rs_brief(&data[data_height / 2][data_width / 2], data_width, static_cast<float>(-angle)-360.0f, descriptors_backwards[((360 - angle) % 360) / 10]);
    }

    for (int angle = 0; angle < 360; angle += 10) {
        REQUIRE_SILENT(testbench::is_memory_same(&descriptors_backwards[angle / 10][0], &descriptors_regression[angle / 10][0], 32));

        if (!testbench::is_memory_same(&descriptors_backwards[angle / 10][0], &descriptors_regression[angle / 10][0], 32)) {
            PRINT("Reverse Angle %u:\n", angle);
            for (unsigned int byte = 0; byte < 32; ++byte) {
                PRINT("0x%02x, ", descriptors_regression[angle / 10][byte]);
            }
            PRINT("\n");
            for (unsigned int byte = 0; byte < 32; ++byte) {
                PRINT("0x%02x, ", descriptors_backwards[angle / 10][byte]);
            }
            PRINT("\n");
            for (unsigned int byte = 0; byte < 32; ++byte) {
                if (descriptors_regression[angle / 10][byte] != descriptors_backwards[angle / 10][byte]) {
                    PRINT("^^^^^ ");
                }
                else {
                    PRINT("      ");
                }
            }
            PRINT("\n");
        }
    }
}
